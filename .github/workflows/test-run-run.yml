name: Test URL Processing Workflow

on:
  workflow_dispatch:
    inputs:
      release_url:
        description: 'URL of the release to process (e.g. https://github.com/owner/repo/releases/tag/tag-name)'
        required: true
        type: string

jobs:
  fetch_release:
    runs-on: ubuntu-22.04
    outputs:
      release_body: ${{ steps.get_release.outputs.release_body }}
      release_tag: ${{ steps.get_release.outputs.release_tag }}
    steps:
      - name: Get Release Info
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          # Extract tag from URL
          RELEASE_TAG=$(echo "${{ inputs.release_url }}" | awk -F/ '{print $NF}')
          echo "Fetching release with tag: $RELEASE_TAG"
          
          # Get release info
          RELEASE_INFO=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG")
          
          # Debug: Print raw release info
          echo "Raw release info:"
          echo "$RELEASE_INFO"
          
          # Check if release was found
          if [ "$(echo "$RELEASE_INFO" | jq -r '.message')" = "Not Found" ]; then
            echo "Error: Release not found"
            exit 1
          fi
          
          # Extract body and debug
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
          echo "Extracted release body:"
          echo "$RELEASE_BODY"
          
          # Save release body with proper escaping
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      # Add verification step
      - name: Verify Release Body
        if: success()
        run: |
          echo "Verifying release body content:"
          echo "${{ steps.get_release.outputs.release_body }}"
          
          if [ -z "${{ steps.get_release.outputs.release_body }}" ]; then
            echo "Error: Release body is empty"
            exit 1
          fi

  url_check:
    needs: fetch_release
    runs-on: ubuntu-22.04
    outputs:
      has_media_error: ${{ steps.url_check.outputs.has_media_error }}
      has_server_error: ${{ steps.url_check.outputs.has_server_error }}
      has_mesh: ${{ steps.type_check.outputs.has_mesh }}
      has_volumetric_images: ${{ steps.type_check.outputs.has_volumetric_images }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install selenium webdriver-manager
          
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb

      - name: Create Release Body File
        run: |
          echo "${{ needs.fetch_release.outputs.release_body }}" > release_body.txt
          
      - name: Create Screenshots Directory
        run: mkdir -p screenshots

      - name: Run URL check
        id: url_check
        run: |
          python .github/scripts/url_screenshot_check.py release_body.txt || true
          
          # Move any generated screenshots to screenshots directory
          mv *.png screenshots/ 2>/dev/null || true
          
          if [ -f "url_check_status.json" ]; then
            status=$(cat url_check_status.json | jq -r .status)
            if [ "$status" = "media_error" ]; then
              echo "has_media_error=true" >> "$GITHUB_OUTPUT"
              echo "has_server_error=false" >> "$GITHUB_OUTPUT"
              exit 0
            elif [ "$status" = "server_error" ]; then
              echo "has_media_error=false" >> "$GITHUB_OUTPUT"
              echo "has_server_error=true" >> "$GITHUB_OUTPUT"
            else
              echo "has_media_error=false" >> "$GITHUB_OUTPUT"
              echo "has_server_error=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "has_media_error=false" >> "$GITHUB_OUTPUT"
            echo "has_server_error=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload URL Check Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: url-check-screenshots
          path: |
            screenshots/*.png
          retention-days: 90

      - name: Run 2D/3D Type Check
        id: type_check
        run: |
          python .github/scripts/2D3D_check.py release_body.txt || true
          if [ -f "url_check_status.json" ]; then
            has_mesh=$(cat url_check_status.json | jq -r .has_mesh)
            has_volumetric=$(cat url_check_status.json | jq -r .has_volumetric_images)
            echo "has_mesh=$has_mesh" >> "$GITHUB_OUTPUT"
            echo "has_volumetric_images=$has_volumetric" >> "$GITHUB_OUTPUT"
          else
            echo "has_mesh=false" >> "$GITHUB_OUTPUT"
            echo "has_volumetric_images=false" >> "$GITHUB_OUTPUT"
          fi

  process_3d:
    needs: [fetch_release, url_check]
    if: |
      needs.url_check.outputs.has_media_error != 'true' &&
      needs.url_check.outputs.has_server_error != 'true' &&
      needs.url_check.outputs.has_mesh == 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser libnss3 libgbm1 libasound2 xvfb
          pip install --upgrade pip
          pip install --upgrade openai selenium pillow webdriver-manager urllib3

      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Generate Timestamp
        id: gen_ts
        run: |
          TS=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"

      - name: Process CT Images
        id: process_images
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONUNBUFFERED: 1
        run: |
          echo "${{ needs.fetch_release.outputs.release_body }}" > release_body.txt
          
          # Debug: Show content of release_body.txt
          echo "Content of release_body.txt:"
          cat release_body.txt
          
          # Extract URL from release body and process it directly
          URL=$(grep -o 'https://www.morphosource.org/concern/media/[0-9]\+' release_body.txt || true)
          
          if [ -z "$URL" ]; then
            echo "Error: No MorphoSource URL found in release body"
            exit 1
          fi
          
          echo "Found URL: $URL"
          mkdir -p screenshots
          
          # Pass URL directly to the script via environment variable
          URL="$URL" timeout 30m python3 .github/scripts/ct_image_to_text.py "$URL" screenshots 2>&1 | tee process.log
          
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          cat process.log | grep -v "DEBUG" | grep -v "INFO" | grep -v "WARNING" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Upload CT Image Screenshots
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ct-image-screenshots-${{ steps.gen_ts.outputs.timestamp }}
          path: |
            screenshots/*.png
          retention-days: 90

      - name: Create Image Analysis Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: "ct_image_analysis-${{ steps.gen_ts.outputs.timestamp }}"
          release_name: "CT Image Analysis #${{ steps.gen_ts.outputs.timestamp }}"
          body: |
            Analysis for MorphoSource release: ${{ needs.fetch_release.outputs.release_tag }}
            
            ${{ steps.process_images.outputs.description }}
          draft: false
          prerelease: false

  process_2d:
    needs: [fetch_release, url_check]
    if: |
      needs.url_check.outputs.has_media_error != 'true' &&
      needs.url_check.outputs.has_server_error != 'true' &&
      needs.url_check.outputs.has_volumetric_images == 'true'
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser libnss3 libgbm1 libasound2 xvfb
          pip install --upgrade pip
          pip install --upgrade openai selenium pillow webdriver-manager urllib3 requests

      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Generate Timestamp
        id: gen_ts
        run: |
          TS=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"

      - name: Process CT Slices
        id: process_slices
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONUNBUFFERED: 1
        run: |
          echo "${{ needs.fetch_release.outputs.release_body }}" > release_body.txt
          
          # Debug: Show content of release_body.txt
          echo "Content of release_body.txt:"
          cat release_body.txt
          
          # Extract URL from release body and process it directly
          URL=$(grep -o 'https://www.morphosource.org/concern/media/[0-9]\+' release_body.txt || true)
          
          if [ -z "$URL" ]; then
            echo "Error: No MorphoSource URL found in release body"
            exit 1
          fi
          
          echo "Found URL: $URL"
          mkdir -p screenshots
          
          # Pass URL directly to the script via environment variable
          URL="$URL" timeout 30m python3 .github/scripts/ct_slices_to_text.py "$URL" screenshots 2>&1 | tee process.log
          
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          cat process.log | grep -v "DEBUG" | grep -v "INFO" | grep -v "WARNING" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Upload CT Slice Screenshots
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ct-slice-screenshots-${{ steps.gen_ts.outputs.timestamp }}
          path: |
            screenshots/*.png
          retention-days: 90

      - name: Create Slice Analysis Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: "ct_slice_analysis-${{ steps.gen_ts.outputs.timestamp }}"
          release_name: "CT Slice Analysis #${{ steps.gen_ts.outputs.timestamp }}"
          body: |
            Analysis for MorphoSource release: ${{ needs.fetch_release.outputs.release_tag }}
            
            ${{ steps.process_slices.outputs.description }}
          draft: false
          prerelease: false 
