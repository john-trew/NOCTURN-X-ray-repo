name: MorphoSource Analysis Workflow

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Parse MorphoSource Data"]
    types: [completed]

jobs:
  check_release:
    runs-on: ubuntu-latest
    outputs:
      is_morphosource: ${{ steps.check_morpho.outputs.is_morphosource }}
      release_body: ${{ steps.fetch_release.outputs.release_body }}
      release_tag: ${{ steps.fetch_release.outputs.release_tag }}
    steps:
      # Check out repository
      - name: Check out repo
        uses: actions/checkout@v3

      # Fetch Latest Release (using the working approach from CT to Text)
      - name: Fetch Latest Release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          echo "Fetching the latest release from this repo..."
          response=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest)

          # Save JSON for debugging
          echo "$response" > latest_release.json

          # Extract fields
          body=$(echo "$response" | python -c "import sys, json; print(json.load(sys.stdin)['body'])")
          tag_name=$(echo "$response" | python -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")

          echo "Found release tag_name=$tag_name"

          # Store outputs (multi-line safe)
          echo "release_body<<EOF" >> "$GITHUB_OUTPUT"
          echo "$body" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "release_tag=$tag_name" >> "$GITHUB_OUTPUT"

      # Check if it's a morphosource release
      - name: Check if morphosource-updates
        id: check_morpho
        run: |
          TAG_NAME="${{ steps.fetch_release.outputs.release_tag }}"
          echo "Found TAG_NAME=$TAG_NAME"

          if [[ "$TAG_NAME" == morphosource-updates-* ]]; then
            echo "is_morphosource=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_morphosource=false" >> "$GITHUB_OUTPUT"
          fi

  url_check:
    needs: check_release
    if: needs.check_release.outputs.is_morphosource == 'true'
    runs-on: ubuntu-latest
    outputs:
      has_media_error: ${{ steps.url_check.outputs.has_media_error }}
      has_server_error: ${{ steps.url_check.outputs.has_server_error }}
      has_mesh: ${{ steps.type_check.outputs.has_mesh }}
      has_volumetric_images: ${{ steps.type_check.outputs.has_volumetric_images }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install selenium webdriver-manager
          
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb

      - name: Create Release Body File
        run: |
          echo "${{ needs.check_release.outputs.release_body }}" > release_body.txt
          
      - name: Run URL check
        id: url_check
        run: |
          python .github/scripts/url_screenshot_check.py release_body.txt || true
          if [ -f "url_check_status.json" ]; then
            status=$(cat url_check_status.json | jq -r .status)
            if [ "$status" = "media_error" ]; then
              echo "has_media_error=true" >> "$GITHUB_OUTPUT"
              echo "has_server_error=false" >> "$GITHUB_OUTPUT"
            elif [ "$status" = "server_error" ]; then
              echo "has_media_error=false" >> "$GITHUB_OUTPUT"
              echo "has_server_error=true" >> "$GITHUB_OUTPUT"
            else
              echo "has_media_error=false" >> "$GITHUB_OUTPUT"
              echo "has_server_error=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "has_media_error=false" >> "$GITHUB_OUTPUT"
            echo "has_server_error=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run 2D/3D Type Check
        id: type_check
        run: |
          python .github/scripts/2D3D_check.py release_body.txt || true
          if [ -f "url_check_status.json" ]; then
            has_mesh=$(cat url_check_status.json | jq -r .has_mesh)
            has_volumetric=$(cat url_check_status.json | jq -r .has_volumetric_images)
            echo "has_mesh=$has_mesh" >> "$GITHUB_OUTPUT"
            echo "has_volumetric_images=$has_volumetric" >> "$GITHUB_OUTPUT"
          else
            echo "has_mesh=false" >> "$GITHUB_OUTPUT"
            echo "has_volumetric_images=false" >> "$GITHUB_OUTPUT"
          fi

  process_3d:
    needs: [check_release, url_check]
    if: |
      needs.check_release.outputs.is_morphosource == 'true' &&
      needs.url_check.outputs.has_media_error != 'true' &&
      needs.url_check.outputs.has_server_error != 'true' &&
      needs.url_check.outputs.has_mesh == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser libnss3 libgbm1 libasound2 xvfb
          pip install --upgrade pip
          pip install --upgrade openai selenium pillow webdriver-manager urllib3

      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Generate Timestamp
        id: gen_ts
        run: |
          TS=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"

      - name: Process CT Images
        id: process_images
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONUNBUFFERED: 1
        run: |
          echo "${{ needs.check_release.outputs.release_body }}" > release_body.txt
          mkdir -p screenshots
          
          timeout 30m python3 .github/scripts/ct_image_to_text.py release_body.txt screenshots 2>&1 | tee process.log
          
          if [ ! -f screenshots/*.png ]; then
            echo "No screenshots were generated. Check process.log for details."
            cat process.log
            exit 1
          fi
          
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          cat process.log | grep -v "DEBUG" | grep -v "INFO" | grep -v "WARNING" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create Image Analysis Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: "ct_image_analysis-${{ steps.gen_ts.outputs.timestamp }}"
          release_name: "CT Image Analysis #${{ steps.gen_ts.outputs.timestamp }}"
          body: |
            Analysis for MorphoSource release: ${{ needs.check_release.outputs.release_tag }}
            
            ${{ steps.process_images.outputs.description }}
          draft: false
          prerelease: false

      - name: Upload Screenshots
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ct-scan-screenshots
          path: screenshots/*.png
          retention-days: 90

  process_2d:
    needs: [check_release, url_check]
    if: |
      needs.check_release.outputs.is_morphosource == 'true' &&
      needs.url_check.outputs.has_media_error != 'true' &&
      needs.url_check.outputs.has_server_error != 'true' &&
      needs.url_check.outputs.has_volumetric_images == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install selenium webdriver-manager
          
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb

      - name: Create screenshots directory
        run: mkdir -p screenshots

      - name: Generate Timestamp
        id: gen_ts
        run: |
          TS=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"

      - name: Process 2D Screenshots
        id: process_slices
        run: |
          echo "${{ needs.check_release.outputs.release_body }}" > release_body.txt
          python .github/scripts/2D_screenshot.py release_body.txt 2>&1 | tee process.log
          
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          cat process.log >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Upload Screenshots
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: morphosource_2d_screenshots
          path: |
            *.png
            screenshots/*.png
            !error_*.png
            !screenshots/error_*.png

  handle_errors:
    needs: [check_release, url_check, process_3d, process_2d]
    if: |
      always() && 
      needs.check_release.outputs.is_morphosource == 'true' &&
      (needs.url_check.outputs.has_media_error == 'true' || 
       needs.url_check.outputs.has_server_error == 'true' ||
       failure())
    runs-on: ubuntu-latest
    steps:
      - name: Upload Error Screenshots
        uses: actions/upload-artifact@v3
        with:
          name: error_screenshots
          path: |
            error_*.png
            screenshots/error_*.png
            process.log
            
      - name: Report Error Status
        run: |
          if [ "${{ needs.url_check.outputs.has_media_error }}" == "true" ]; then
            echo "Media error occurred during processing"
            exit 1
          fi
          
          if [ "${{ needs.url_check.outputs.has_server_error }}" == "true" ]; then
            echo "Server error occurred during processing"
            exit 1
          fi
          
          if [ "${{ needs.process_3d.result }}" == "success" ] || [ "${{ needs.process_2d.result }}" == "success" ]; then
            echo "Analysis completed successfully"
            exit 0
          else
            echo "Analysis failed"
            exit 1
          fi
