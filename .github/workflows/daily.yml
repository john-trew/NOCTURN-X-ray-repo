name: Daily MorphoSource Check
on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write
  id-token: write
  actions: read
  attestations: write

jobs:
  check-and-collect:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Set timestamp
      id: timestamp
      run: |
        TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
        echo "timestamp=$TIMESTAMP" >> $GITHUB_ENV
        echo "Timestamp set to: $TIMESTAMP"

    - name: Find Latest Data Directory
      id: find-latest
      run: |
        LATEST_DIR=$(find data -maxdepth 1 -type d -name "20*" | sort -r | head -n1 || echo "")
        if [ -z "$LATEST_DIR" ]; then
          echo "No timestamped data directories found"
          exit 1
        fi
        echo "Found latest data directory: $LATEST_DIR"
        echo "dir=$LATEST_DIR" >> $GITHUB_OUTPUT

    - name: Create Timestamp Directory
      run: |
        mkdir -p "data/${{ env.timestamp }}"

    - name: Run Daily Check
      id: daily-check
      env:
        LATEST_DATA_DIR: ${{ steps.find-latest.outputs.dir }}
        CURRENT_DIR: data/${{ env.timestamp }}
      run: |
        python .github/scripts/daily.py \
          --data-dir "$LATEST_DATA_DIR" \
          --output-dir "$CURRENT_DIR"
      continue-on-error: true

    - name: Create Release Notes
      if: always()
      run: |
        if [ "${{ steps.daily-check.outcome }}" == "success" ]; then
          cat << EOF > "data/${{ env.timestamp }}/release_notes.txt"
# Daily Check Report
Check Date: $(date +'%Y-%m-%d %H:%M:%S')

No new records found since last check.

## Previous Data
Last check: ${{ steps.find-latest.outputs.dir }}
EOF
        fi

    - name: Generate Attestation
      if: steps.daily-check.outcome == 'failure'
      uses: actions/attest@v2.1.0
      id: attest
      with:
        subject-path: data/${{ env.timestamp }}/morphosource_data_complete.json
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        show-summary: true
        predicate: |
          {
            "purl": "pkg:github/${{ github.repository }}",
            "version": "${{ github.sha }}",
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}",
              "completeness": {
                "parameters": true,
                "environment": true,
                "materials": true
              },
              "stats": {
                "total_records": "${{ steps.collect.outputs.total_records }}",
                "modified_records": "${{ steps.collect.outputs.modified_records }}"
              }
            }
          }

    - name: Save Attestation and Update Release Notes
      if: steps.daily-check.outcome == 'failure'
      run: |
        # Get attestation ID from URL in output
        ATT_URL="${{ steps.attest.outputs.attestation-url }}"
        ATT_ID=$(echo "$ATT_URL" | grep -o '[0-9]*$' || true)
        
        echo "Attestation URL: $ATT_URL"
        echo "Attestation ID: $ATT_ID"
        
        if [ -z "$ATT_ID" ]; then
          echo "Error: Could not extract attestation ID"
          exit 1
        fi
        
        # Fetch the attestation page and extract SHA256
        DIGEST=$(curl -s "$ATT_URL" | grep -A2 "Subjects" | grep "sha256:" | sed 's/.*sha256:\([a-f0-9]\{64\}\).*/\1/')
        echo "SHA256 Digest: $DIGEST"
        
        # Validate that we got a proper SHA256 (64 hex characters)
        if ! [[ $DIGEST =~ ^[a-f0-9]{64}$ ]]; then
          echo "Error: Invalid SHA256 digest format"
          exit 1
        fi
        
        # Update the release notes with attestation info
        echo -e "\n## Attestation\nDataset: $ATT_URL" >> "data/${{ env.timestamp }}/release_notes.txt"

    - name: Create Release
      if: always()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: "Daily Check #${{ env.timestamp }}"
        tag_name: "daily-${{ env.timestamp }}"
        body_path: data/${{ env.timestamp }}/release_notes.txt
        files: |
          data/${{ env.timestamp }}/morphosource_data_complete.json
          data/${{ env.timestamp }}/daily_info.json

    - name: Commit data files
      if: always()
      run: |
        echo "::group::Files to be committed"
        git add -f "data/${{ env.timestamp }}/"
        git status
        echo "::endgroup::"
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Daily check data [${{ env.timestamp }}]"
          git push origin HEAD:main
        fi

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: daily-logs-${{ env.timestamp }}
        path: |
          data/${{ env.timestamp }}/*
