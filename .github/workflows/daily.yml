name: Daily MorphoSource Check
on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write
  id-token: write
  actions: read
  attestations: write

jobs:
  check-and-collect:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch complete history
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4
        
    - name: Create data directory
      run: mkdir -p data
        
    - name: Find Latest Data Directory
      id: find-latest
      run: |
        # Find the latest timestamped directory in data/
        LATEST_DIR=$(find data -maxdepth 1 -type d -name "20*" | sort -r | head -n1 || echo "")
        if [ -z "$LATEST_DIR" ]; then
          echo "No timestamped data directories found"
          exit 1
        fi
        echo "Found latest data directory: $LATEST_DIR"
        echo "dir=$LATEST_DIR" >> $GITHUB_OUTPUT

    - name: Run daily check
      id: daily-check
      env:
        LATEST_DATA_DIR: ${{ steps.find-latest.outputs.dir }}
      run: |
        python .github/scripts/daily.py --data-dir "$LATEST_DATA_DIR"
      continue-on-error: true

    - name: Generate timestamp
      id: timestamp
      run: |
        echo "value=$(date +'%Y-%m-%d_%H-%M-%S')" >> "$GITHUB_OUTPUT"

    - name: Collect new records
      id: collect
      if: steps.daily-check.outcome == 'failure'  # Only run if new records found
      run: |
        python .github/scripts/collect.py

    - name: Create Release Notes
      if: always()
      run: |
        if [ "${{ steps.daily-check.outcome }}" == "success" ]; then
          echo "No new records found" > data/release_notes.txt
        fi

    - name: Generate Attestation for Complete Dataset
      if: steps.daily-check.outcome == 'failure'
      uses: actions/attest@v2.1.0
      id: attest-complete
      with:
        subject-path: data/morphosource_data_complete.json
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        output-path: complete_dataset_attestation.json
        predicate: |
          {
            "purl": "pkg:github/${{ github.repository }}",
            "version": "${{ github.sha }}",
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}",
              "completeness": {
                "parameters": true,
                "environment": true,
                "materials": true
              },
              "recordCount": "${{ steps.collect.outputs.count }}"
            }
          }

    - name: Generate Attestation for New Records
      if: steps.daily-check.outcome == 'failure'
      uses: actions/attest@v2.1.0
      id: attest-new
      with:
        subject-path: data/new_records_details.json
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        output-path: new_records_attestation.json
        predicate: |
          {
            "purl": "pkg:github/${{ github.repository }}",
            "version": "${{ github.sha }}",
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}",
              "completeness": {
                "parameters": true,
                "environment": true,
                "materials": true
              }
            }
          }

    - name: Prepare Release Body
      id: release_body
      run: |
        NOTES=$(cat data/release_notes.txt)
        # Create multiline string with release notes and attestation info
        echo "BODY<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Attestations" >> $GITHUB_OUTPUT
        echo "Complete Dataset: ${{ steps.attest-complete.outputs.attestation-url }}" >> $GITHUB_OUTPUT
        echo "New Records: ${{ steps.attest-new.outputs.attestation-url }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      if: always()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: "MorphoSource Check #${{ steps.timestamp.outputs.value }}"
        tag_name: "morphosource-check-${{ steps.timestamp.outputs.value }}"
        body: ${{ steps.release_body.outputs.BODY }}
        files: |
          data/morphosource_data_complete.json
          data/new_records_details.json
          complete_dataset_attestation.json
          new_records_attestation.json

    - name: Commit and push if changes
      if: steps.daily-check.outcome == 'failure'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/morphosource_data_complete.json
        git commit -m "Update MorphoSource data [skip ci]" || exit 0
        git push

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: execution-logs
        path: |
          data/daily_extractor.log
          data/collector.log
