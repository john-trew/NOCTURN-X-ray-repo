name: CT Images to Text

on:
  workflow_run:
    workflows: ["Parse MorphoSource Data"]
    types: [completed]

jobs:
  ct_image_text_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          pip install requests beautifulsoup4 openai selenium pillow webdriver-manager

      - name: Fetch MorphoSource Release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          echo "Fetching releases from this repo..."
          
          # Get all releases (paginate through them)
          releases=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100")
          
          # Find the most recent morphosource-updates release
          morphosource_release=$(echo "$releases" | python3 -c $'
import sys, json
try:
    releases = json.load(sys.stdin)
    # Filter for morphosource-updates releases
    morpho_releases = [r for r in releases if r.get("tag_name", "").startswith("morphosource-updates-")]
    if morpho_releases:
        latest = morpho_releases[0]  # Most recent is first
        print(json.dumps({
            "body": latest.get("body", ""),
            "tag_name": latest.get("tag_name", ""),
        }))
    else:
        print("{}")
except Exception as e:
    print("{}")
')
          
          # Extract data from the found release
          body=$(echo "$morphosource_release" | python3 -c $'
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get("body", ""))
except:
    print("")
')
          
          tag_name=$(echo "$morphosource_release" | python3 -c $'
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get("tag_name", ""))
except:
    print("")
')
          
          # Extract URL from body
          url=$(echo "$body" | python3 -c $'
import sys, re
try:
    content = sys.stdin.read()
    match = re.search(r"https://[^\s\)\\"\']+", content)
    print(match.group(0) if match else "NO_URL_FOUND")
except:
    print("NO_URL_FOUND")
')
          
          if [ -z "$tag_name" ] || [[ "$tag_name" != morphosource-updates-* ]]; then
            echo "No morphosource-updates release found"
            echo "is_morphosource=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "Found morphosource release: $tag_name"
          echo "is_morphosource=true" >> "$GITHUB_OUTPUT"
          
          if [ "$url" != "NO_URL_FOUND" ]; then
            echo "morphosource_url=$url" >> "$GITHUB_OUTPUT"
          else
            echo "morphosource_url=" >> "$GITHUB_OUTPUT"
          fi
          
          echo "release_tag=$tag_name" >> "$GITHUB_OUTPUT"

      - name: Generate Timestamp
        id: gen_ts
        if: steps.fetch_release.outputs.is_morphosource == 'true'
        run: |
          TS=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"

      - name: Process CT Images
        id: process_images
        if: steps.fetch_release.outputs.is_morphosource == 'true' && steps.fetch_release.outputs.morphosource_url != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MORPHOSOURCE_URL: ${{ steps.fetch_release.outputs.morphosource_url }}
        run: |
          if [ -z "$MORPHOSOURCE_URL" ]; then
            echo "No valid MorphoSource URL found in release."
            exit 1
          fi
          
          mkdir -p screenshots
          python .github/scripts/ct_image_to_text.py "$MORPHOSOURCE_URL" screenshots > ct_image_output.txt
          
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          cat ct_image_output.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create Image Analysis Release
        if: steps.fetch_release.outputs.is_morphosource == 'true' && success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: "ct_image_analysis-${{ steps.gen_ts.outputs.timestamp }}"
          release_name: "CT Image Analysis #${{ steps.gen_ts.outputs.timestamp }}"
          body: ${{ steps.process_images.outputs.description }}
          draft: false
          prerelease: false

      - name: Handle Errors
        if: failure()
        run: |
          echo "Workflow failed. Please check:"
          echo "1. Release tag format"
          echo "2. Valid MorphoSource URL in release body"
          echo "3. OpenAI API key configuration"
          echo "4. Python dependencies installation"
          echo "5. Screenshot capture process"
          exit 1
