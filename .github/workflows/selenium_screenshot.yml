name: Automated Screenshot Workflow

on:
  workflow_run:
    # 1) Trigger this workflow after the "CT to Text" workflow completes.
    workflows: ["CT to Text"]
    types: [completed]

jobs:
  screenshot_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      # -------------------------------------------------------
      # 1. Check out your repository
      # -------------------------------------------------------
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Log - Checked out repository
        run: echo "Repository has been checked out."

      # -------------------------------------------------------
      # 2. Set up Python
      # -------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Log - Python setup complete
        run: echo "Python 3.9 is now set up."

      # -------------------------------------------------------
      # 3. Install Dependencies (including Chrome and Chromedriver)
      # -------------------------------------------------------
      - name: Install Chrome and Chromedriver
        run: |
          echo "Starting installation of Chrome & Chromedriver..."
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          echo "Chrome & Chromedriver installation complete."

      - name: Install pip dependencies
        run: |
          echo "Installing Python dependencies via pip..."
          pip install selenium requests beautifulsoup4 openai
          echo "pip install complete."

      # -------------------------------------------------------
      # 4. Fetch all releases and find the latest 'morphosource-updates-...' one
      # -------------------------------------------------------
      - name: Fetch MorphoSource release
        id: fetch_morpho
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          echo "Fetching the list of releases from this repo..."
          response=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=10")

          echo "$response" > all_releases.json
          echo "Saved all_releases.json. Parsing to find the latest 'morphosource-updates-' release..."

          # Carefully place Python code in a multiline heredoc
          python << 'EOF' > morpho_out.json
import json

with open("all_releases.json", "r", encoding="utf-8") as f:
    data = json.load(f)

best_release = None
for release in data:
    tag = release.get("tag_name", "")
    if tag.startswith("morphosource-updates-"):
        # If no best_release yet, or this one is newer by created_at
        if best_release is None:
            best_release = release
        else:
            if release.get("created_at", "") > best_release.get("created_at", ""):
                best_release = release

if best_release:
    print(json.dumps({
        "found": True,
        "tag_name": best_release["tag_name"],
        "body": best_release["body"]
    }, indent=2))
else:
    print(json.dumps({"found": False}))
EOF

          # Now read morpho_out.json to see if found == true
          found=$(cat morpho_out.json | python -c "import sys, json; j=json.load(sys.stdin); print(j.get('found', False))")
          if [ "$found" = "True" ]; then
            echo "Found a morphosource-updates release."
            tag_name=$(cat morpho_out.json | python -c "import sys, json; j=json.load(sys.stdin); print(j['tag_name'])")
            body=$(cat morpho_out.json | python -c "import sys, json; j=json.load(sys.stdin); print(j['body'])")

            # Expose them as step outputs
            echo "release_tag=$tag_name" >> "$GITHUB_OUTPUT"
            echo "release_body<<EOF" >> "$GITHUB_OUTPUT"
            echo "$body" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "No morphosource-updates-* release found in the last 10 releases."
            echo "release_tag=" >> "$GITHUB_OUTPUT"
            echo "release_body=" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 5. Check if we found a morphosource-updates release
      # -------------------------------------------------------
      - name: Check if morphosource-updates found
        id: check_morpho
        run: |
          TAG_NAME="${{ steps.fetch_morpho.outputs.release_tag }}"
          echo "Checking if we found a morphosource-updates release: $TAG_NAME"

          if [[ -z "$TAG_NAME" ]]; then
            echo "is_morphosource=false" >> "$GITHUB_OUTPUT"
            echo "No morphosource-updates-* release found. Skipping."
          else
            echo "is_morphosource=true" >> "$GITHUB_OUTPUT"
            echo "We have a valid morphosource-updates release to work with."

      # -------------------------------------------------------
      # 6. Take Screenshots (Only if we found morphosource-updates)
      # -------------------------------------------------------
      - name: Take screenshots via Selenium
        if: steps.check_morpho.outputs.is_morphosource == 'true'
        run: |
          echo "Storing release body to 'release_body.txt'..."
          echo "${{ steps.fetch_morpho.outputs.release_body }}" > release_body.txt

          echo "Running selenium_screenshot.py to capture screenshots..."
          python .github/scripts/selenium_screenshot.py release_body.txt 2>&1 | tee screenshot_log.txt

      # -------------------------------------------------------
      # 7. Upload screenshots as artifacts
      # -------------------------------------------------------
      - name: Upload screenshots artifacts
        if: steps.check_morpho.outputs.is_morphosource == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: morphosource_screenshots
          path: |
            screenshots/*
            screenshot_log.txt

      # -------------------------------------------------------
      # 8. Fallback if not found morphosource-updates
      # -------------------------------------------------------
      - name: No new morphosource release
        if: steps.check_morpho.outputs.is_morphosource == 'false'
        run: echo "No 'morphosource-updates-*' release found. Skipping screenshot steps."
