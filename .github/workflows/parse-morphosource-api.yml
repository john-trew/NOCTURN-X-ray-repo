name: Parse MorphoSource API (total_count + latest record)
on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      query:
        description: 'Free-text q= for /api/media'
        required: false
        default: 'X-ray'
concurrency:
  group: morphosource-api
  cancel-in-progress: false
permissions:
  contents: write
jobs:
  api_query_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: pip install requests
      - name: Run API Query
        id: api
        env:
          BASE_URL: https://www.morphosource.org/api/media
          QUERY: ${{ github.event.inputs.query || 'X-ray' }}
          UTF8_CHK: "✓"
          SEARCH_FIELD: all_fields
          # Files
          LAST_COUNT_FILE: .github/last_count.txt
          COUNT_OUTFILE: morphosource_xray_count.txt
          MORPHOSOURCE_API_KEY: ${{ secrets.MORPHOSOURCE_API_KEY }}
        run: |
          python .github/scripts/parse_morphosource_api.py
      - name: Generate Timestamp
        id: gen_ts
        if: steps.api.outputs.new_data == 'true'
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
      - name: Validate and sanitize tag components
        id: tag_prep
        if: steps.api.outputs.new_data == 'true'
        run: |
          set -euo pipefail
          LATEST_ID="${{ steps.api.outputs.latest_id }}"
          TIMESTAMP="${{ steps.gen_ts.outputs.timestamp }}"
          
          echo "=== Tag Validation Debug ==="
          echo "Original latest_id: '$LATEST_ID'"
          echo "Timestamp: '$TIMESTAMP'"
          
          # Check if latest_id is empty or invalid
          if [ -z "$LATEST_ID" ] || [ "$LATEST_ID" = "None" ] || [ "$LATEST_ID" = "null" ]; then
            echo "WARNING: latest_id is empty/invalid, using fallback"
            LATEST_ID="unknown-$(date +%s)"
          fi
          
          # Sanitize: remove/replace characters invalid in Git tags
          # Git tags can't contain: spaces, ~, ^, :, ?, *, [, \, .., @{, or end with .lock
          SANITIZED_ID=$(echo "$LATEST_ID" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/^-*//' | sed 's/-*$//')
          
          # Ensure sanitized ID is not empty after cleaning
          if [ -z "$SANITIZED_ID" ]; then
            SANITIZED_ID="record-$(date +%s)"
          fi
          
          TAG_NAME="morphosource-api-${SANITIZED_ID}-${TIMESTAMP}"
          
          echo "Sanitized ID: '$SANITIZED_ID'"
          echo "Final tag_name: '$TAG_NAME'"
          echo "==========================="
          
          echo "sanitized_id=$SANITIZED_ID" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
      - name: Job summary
        run: |
          {
            echo "### MorphoSource API summary"
            echo ""
            echo "- Query: \`${{ github.event.inputs.query || 'X-ray' }}\`"
            echo "- Current total_count: **${{ steps.api.outputs.count }}**"
            echo "- Previous: **${{ steps.api.outputs.old_count }}** (source: _${{ steps.api.outputs.baseline_source }}_)"
            echo "- Δ since baseline: **${{ steps.api.outputs.delta }}**"
            echo "- Latest media id: \`${{ steps.api.outputs.latest_id }}\`"
            echo "- Latest title: ${{ steps.api.outputs.latest_title }}"
            if [ "${{ steps.api.outputs.new_data }}" = "true" ]; then
              echo "- **Generated tag**: \`${{ steps.tag_prep.outputs.tag_name }}\`"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Commit updated count files (safe rebase)
        if: steps.api.outputs.new_data == 'true'
        env:
          COUNT: ${{ steps.api.outputs.count }}
          LAST_COUNT_FILE: .github/last_count.txt
          COUNT_OUTFILE: morphosource_xray_count.txt
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout main
          git fetch origin main
          git add "$LAST_COUNT_FILE" "$COUNT_OUTFILE" || true
          git commit -m "MorphoSource API total_count -> ${COUNT}" || echo "No local changes to commit."
          set +e
          git pull --rebase --autostash origin main
          REBASE_STATUS=$?
          if [ $REBASE_STATUS -ne 0 ]; then
            echo "Rebase conflict detected. Preferring generated files from this run…"
            git checkout --ours -- "$LAST_COUNT_FILE" "$COUNT_OUTFILE" 2>/dev/null || true
            git add "$LAST_COUNT_FILE" "$COUNT_OUTFILE" 2>/dev/null || true
            git rebase --continue || (git rebase --abort; echo "Rebase failed; aborting." && exit 1)
          fi
          set -e
          git push --force-with-lease origin HEAD:main
      - name: Create Release (on increase or first-run)
        if: steps.api.outputs.new_data == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_prep.outputs.tag_name }}
          release_name: "MorphoSource API • ${{ steps.api.outputs.latest_title || steps.tag_prep.outputs.sanitized_id }} • ${{ steps.gen_ts.outputs.timestamp }}"
          body: ${{ steps.api.outputs.details }}
          draft: false
          prerelease: false
