name: Release Analysis and Wiki Generation

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs weekly on Sunday at midnight
  workflow_dispatch:      # Allows manual trigger

jobs:
  analyze-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub semver anthropic openai

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Clone Wiki
        run: |
          git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY.wiki.git" wiki
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate initial wiki content
        run: |
          python3 << 'ENDPYTHON'
          import os
          import datetime
          from github import Github
          from pathlib import Path
          
          # Initialize GitHub client
          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
          
          # Create wiki directory if it doesn't exist
          wiki_dir = Path('wiki')
          wiki_dir.mkdir(exist_ok=True)
          
          # Get all releases
          try:
              releases = list(repo.get_releases())
              releases.sort(key=lambda x: x.created_at, reverse=True)
          except Exception as e:
              print(f"Error fetching releases: {str(e)}")
              releases = []
          
          # Group releases by week
          weekly_releases = {}
          for release in releases:
              week_start = release.created_at.date() - datetime.timedelta(days=release.created_at.weekday())
              if week_start not in weekly_releases:
                  weekly_releases[week_start] = []
              weekly_releases[week_start].append(release)
          
          # Generate wiki content for each week
          for week_start, week_releases in weekly_releases.items():
              week_end = week_start + datetime.timedelta(days=6)
              page_title = f"Releases-{week_start.strftime('%Y-%m-%d')}"
              file_path = wiki_dir / f"{page_title}.md"
              
              content = f"# Release Summary for Week of {week_start.strftime('%B %d, %Y')}\n\n"
              
              # Add overview statistics
              content += "## Overview\n"
              content += f"- Total releases this week: {len(week_releases)}\n"
              content += f"- Period: {week_start.strftime('%B %d')} - {week_end.strftime('%B %d, %Y')}\n\n"
              
              # Detailed release information
              content += "## Release Details\n\n"
              for release in week_releases:
                  content += f"### {release.title}\n"
                  content += f"- Tag: `{release.tag_name}`\n"
                  content += f"- Released: {release.created_at.strftime('%B %d, %Y %H:%M UTC')}\n"
                  if hasattr(release.author, 'login'):
                      content += f"- Author: @{release.author.login}\n"
                  
                  # Add release notes if available
                  if release.body:
                      content += "\n#### Release Notes\n"
                      content += f"{release.body}\n"
                  
                  content += "\n"
              
              # Write content to file
              file_path.write_text(content, encoding='utf-8')
              
              # Save the content for AI analysis
              with open('current_week_releases.txt', 'w', encoding='utf-8') as f:
                  f.write(content)
          ENDPYTHON

      - name: Run AI analysis
        run: |
          # Copy release analyzer script
          cp .github/scripts/release_analyzer.py .
          
          # Run the analyzer
          python release_analyzer.py
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate summary with AI insights
        run: |
          python3 << 'ENDPYTHON'
          import os
          from pathlib import Path
          
          # Read AI analysis results
          with open('claude_prompt.txt', 'r') as f:
              claude_analysis = f.read()
          
          with open('openai_prompt.txt', 'r') as f:
              openai_analysis = f.read()
          
          # Read existing release summaries
          wiki_dir = Path('wiki')
          summaries = []
          for path in wiki_dir.glob('Releases-*.md'):
              summaries.append(path.stem)
          
          # Sort weeks in reverse chronological order
          summaries.sort(reverse=True)
          
          # Generate enhanced index content
          index_content = "# Release Summaries Index\n\n"
          index_content += "This page contains links to all weekly release summaries.\n\n"
          
          # Add AI insights for the latest week
          index_content += "## Latest Week AI Analysis\n\n"
          index_content += "### Claude Analysis\n"
          index_content += claude_analysis + "\n\n"
          index_content += "### OpenAI Analysis\n"
          index_content += openai_analysis + "\n\n"
          
          # Add links to all summaries
          index_content += "## Weekly Summaries\n\n"
          for summary in summaries:
              week_date = summary.split('-')[1]
              index_content += f"- [{week_date}]({summary})\n"
          
          # Write enhanced index page
          index_path = wiki_dir / "Release-Summaries.md"
          index_path.write_text(index_content, encoding='utf-8')
          ENDPYTHON

      - name: Commit and push wiki changes
        run: |
          cd wiki
          git add .
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update release summaries with AI analysis [skip ci]" && git push)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
