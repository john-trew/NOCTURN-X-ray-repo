name: Test Monthly Collection
on:
  workflow_dispatch:
    inputs:
      record_count:
        description: 'Number of test records to generate'
        required: true
        default: '5'
        type: string

permissions:
  contents: write
  id-token: write
  actions: read
  attestations: write

jobs:
  test-collection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Set timestamp
      id: timestamp
      run: |
        TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
        echo "timestamp=$TIMESTAMP" >> $GITHUB_ENV
        echo "Timestamp set to: $TIMESTAMP"

    - name: Create test script
      run: |
        cat > test_collection.py << 'EOL'
        import json
        import os
        import sys
        from datetime import datetime
        import argparse
        
        def create_test_data(output_dir, record_count):
            print(f"Creating {record_count} test records in {output_dir}")
            
            # Create test records
            records = []
            for i in range(record_count):
                record = {
                    'id': f'test-{i}',
                    'title': f'Test Record {i}',
                    'url': f'https://example.com/record/{i}',
                    'metadata': {
                        'Object': f'Object-{i}',
                        'Publication Status': 'Test'
                    },
                    'scraped_date': datetime.now().isoformat()
                }
                records.append(record)
            
            # Create output directory
            os.makedirs(output_dir, exist_ok=True)
            
            # Save data files with full paths
            data_file = os.path.join(output_dir, 'morphosource_data_complete.json')
            stats_file = os.path.join(output_dir, 'monthly_stats.json')
            notes_file = os.path.join(output_dir, 'monthly_release_notes.txt')
            
            print(f"Writing data to {data_file}")
            with open(data_file, 'w') as f:
                json.dump(records, f, indent=2)
            
            # Save stats
            stats = {
                'total_records': len(records),
                'modified_records': 0,
                'new_records': len(records),
                'collection_date': datetime.now().isoformat()
            }
            print(f"Writing stats to {stats_file}")
            with open(stats_file, 'w') as f:
                json.dump(stats, f, indent=2)
            
            # Create release notes
            print(f"Writing release notes to {notes_file}")
            with open(notes_file, 'w') as f:
                f.write(f"# Test Collection Report\n\n")
                f.write(f"Collection Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write(f"## Summary\n")
                f.write(f"- Total Records: {len(records)}\n")
                f.write(f"- Generated Records: {record_count}\n")
            
            # Print directory contents for verification
            print("\nCreated files:")
            for root, dirs, files in os.walk(output_dir):
                for file in files:
                    print(os.path.join(root, file))
            
            return len(records)

        if __name__ == '__main__':
            parser = argparse.ArgumentParser(description='Test Data Generator')
            parser.add_argument('--output-dir', type=str, required=True,
                            help='Directory to store output files')
            parser.add_argument('--record-count', type=int, required=True,
                            help='Number of test records to generate')
            args = parser.parse_args()
            
            total_records = create_test_data(args.output_dir, args.record_count)
            print(f"\nCreated {total_records} test records")
        EOL

    - name: Create data directories
      run: |
        mkdir -p "data/${{ env.timestamp }}"

    - name: Run test collection
      id: collect
      run: |
        echo "::group::Starting Test Collection"
        echo "Run ID: ${{ github.run_id }}"
        echo "Timestamp: ${{ env.timestamp }}"
        echo "Records to generate: ${{ github.event.inputs.record_count }}"
        echo "::endgroup::"
        
        # Run with verbose output
        python -u test_collection.py \
          --output-dir "data/${{ env.timestamp }}" \
          --record-count "${{ github.event.inputs.record_count }}" \
          2>&1 | tee collection_log.txt
        
        # Show directory contents
        echo "::group::Directory Contents"
        ls -R data/
        echo "::endgroup::"
        
        # Get collection stats
        if [ -f "data/${{ env.timestamp }}/monthly_stats.json" ]; then
          echo "total_records=$(jq '.total_records' "data/${{ env.timestamp }}/monthly_stats.json")" >> $GITHUB_OUTPUT
          ec
