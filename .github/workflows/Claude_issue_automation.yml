name: "Auto Code Generation with Claude on Issue"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string
  issues:
    types: [assigned]

# Add permissions block
permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  generate:
    # Only run if workflow dispatch or if assigned to yourself
    if: >-
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && github.event.assignee.login == 'johntrue15')
    runs-on: ubuntu-latest
    
    steps:
      - name: Set issue number
        id: set-issue
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "issue_number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.WORKFLOW_PAT }}

      - name: Set up branch
        id: set-branch
        run: |
          BRANCH_NAME="claude-pr/issue-${{ steps.set-issue.outputs.issue_number }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Create and checkout new branch
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -b $BRANCH_NAME

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install anthropic PyGithub

      - name: Create directories
        run: |
          mkdir -p .github/generated/workflows
          mkdir -p .github/generated/scripts
          mkdir -p .github/generated/.github/workflows
          mkdir -p .github/generated/.github/scripts

      - name: Generate code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Get issue body based on trigger type
          if [ "${{ github.event_name }}" = "issues" ]; then
            # For issue assignment, use the issue body directly
            ISSUE_BODY=$(echo "${{ github.event.issue.body }}" | sed 's/\r//g' | tr -d '\r')
          else
            # For workflow_dispatch, fetch the issue body and clean it
            ISSUE_BODY=$(gh issue view ${{ steps.set-issue.outputs.issue_number }} --json body -q .body | sed 's/\r//g' | tr -d '\r')
          fi
          
          # Check if issue body is empty or contains only error messages
          if [[ -z "$ISSUE_BODY" ]]; then
            echo "Error: Empty issue body"
            exit 1
          fi
          
          # Check for error patterns
          if echo "$ISSUE_BODY" | grep -q "^Error occurred during analysis"; then
            echo "Warning: Issue contains error message, but continuing..."
          fi
          
          # Run code generation
          python .github/scripts/generate_code.py "$ISSUE_BODY" ${{ steps.set-issue.outputs.issue_number }}

      - name: Create metadata
        run: |
          # Create metadata.json with generated files
          echo '{"generated_files": [' > .github/generated/metadata.json
          first=true
          
          # Add workflow files
          for f in .github/generated/workflows/*.yml; do
            if [ -f "$f" ]; then
              if [ "$first" = false ]; then echo "," >> .github/generated/metadata.json; fi
              echo "\"workflows/$(basename $f)\"" >> .github/generated/metadata.json
              first=false
            fi
          done
          
          # Add script files
          for f in .github/generated/scripts/*.py; do
            if [ -f "$f" ]; then
              if [ "$first" = false ]; then echo "," >> .github/generated/metadata.json; fi
              echo "\"scripts/$(basename $f)\"" >> .github/generated/metadata.json
              first=false
            fi
          done
          
          echo ']' >> .github/generated/metadata.json

      - name: Commit and push
        run: |
          git add .github/generated
          git commit -m "Generated code files for issue #${{ steps.set-issue.outputs.issue_number }}"
          git push origin ${{ steps.set-branch.outputs.branch_name }}

      - name: Create pull request
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: |
          gh pr create \
            --base main \
            --head ${{ steps.set-branch.outputs.branch_name }} \
            --title "Code updates for issue #${{ steps.set-issue.outputs.issue_number }}" \
            --body "Generated code updates for issue #${{ steps.set-issue.outputs.issue_number }}"

      - name: Save workflow data
        run: |
          if [ -f ".github/generated/metadata.json" ]; then
            cp .github/generated/metadata.json ./workflow-data.json
          else
            echo "{\"issue_number\": \"${{ steps.set-issue.outputs.issue_number }}\"}" > workflow-data.json
          fi

      - name: Upload workflow data
        uses: actions/upload-artifact@v3
        with:
          name: workflow-data
          path: workflow-data.json

      - name: Save Claude conversation
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: claude-conversation
          path: |
            .github/generated/claude_conversation.json
            .github/generated/claude_conversation_error.json
          if-no-files-found: warn
