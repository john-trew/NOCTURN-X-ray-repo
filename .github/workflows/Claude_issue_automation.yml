name: "Auto Code Generation with Claude on Issue"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string

# Add permissions block
permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  codegen:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repo
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Configure Git identity
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 3. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      # 4. Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install anthropic requests

      # 5. Create a new branch named "claude-pr/issue-<number>" from origin/main
      - name: Create Issue Branch
        id: create_branch
        run: |
          ISSUE_NUMBER=${{ inputs.issue_number }}
          BRANCH_NAME="claude-pr/issue-${ISSUE_NUMBER}"
          
          # Create new branch from origin/main without checking it out
          git fetch origin main
          git branch "$BRANCH_NAME" origin/main
          git checkout "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # 6. Generate code using Claude via Python script
      - name: Generate code with Claude
        id: generate_code
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ inputs.issue_number }}
          REPO: ${{ github.repository }}
          PYTHONUNBUFFERED: 1
        run: |
          # Enable debug logging
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
          export PYTHONIOENCODING=utf-8
          python -u .github/scripts/generate_code.py
          
          # Check for generated files
          if [ ! -d ".github/generated" ]; then
            echo "Error: Generated code directory not found"
            exit 1
          fi
          
          # List all generated files
          echo "Generated files:"
          find .github/generated -type f -exec ls -l {} \;
          
          # Show preview of each generated file
          for file in $(find .github/generated -type f -name "*.py" -o -name "*.yml"); do
            echo "Preview of ${file}:"
            head -n 5 "${file}"
            echo "---"
          done

      # After generating code but before creating PR
      - name: Save workflow data
        run: |
          if [ -f ".github/generated/metadata.json" ]; then
            cp .github/generated/metadata.json ./workflow-data.json
          else
            echo "{\"issue_number\": \"${{ inputs.issue_number }}\"}" > workflow-data.json
          fi

      - name: Upload workflow data
        uses: actions/upload-artifact@v4
        with:
          name: workflow-data
          path: workflow-data.json

      # 7. Commit & push the generated file
      - name: Commit changes
        run: |
          BRANCH_NAME=${{ steps.create_branch.outputs.BRANCH_NAME }}
          git add .
          git commit -m "Auto-generated code for issue #${{ inputs.issue_number }}"
          git push origin "$BRANCH_NAME"

      # Save Claude conversation artifact
      - name: Save Claude conversation
        if: always()
        run: |
          if [ -f ".github/generated/claude_conversation.json" ]; then
            cp .github/generated/claude_conversation.json ./claude-conversation.json
          fi

      - name: Upload Claude conversation
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-conversation
          path: |
            claude-conversation.json
            .github/generated/claude_conversation.json
          if-no-files-found: ignore
