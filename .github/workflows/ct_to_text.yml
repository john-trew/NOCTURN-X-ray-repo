name: CT to Text

on:
  workflow_run:
    workflows: ["Parse MorphoSource Data"]
    types: [completed]

jobs:
  ct_text_job:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      # -------------------------------------------------------
      # 1. Check out your repository
      # -------------------------------------------------------
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Need at least 2 commits to check for changes

      # -------------------------------------------------------
      # 2. Check for last_count.txt changes
      # -------------------------------------------------------
      - name: Check for MorphoSource updates
        id: check_updates
        run: |
          # Get the commit SHA from the triggering workflow
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Checking commit: $COMMIT_SHA"
          
          # Check if last_count.txt was modified in this commit
          if git diff-tree --no-commit-id --name-only -r "$COMMIT_SHA" | grep -q "^last_count.txt$"; then
            echo "last_count.txt was modified - new MorphoSource data detected"
            echo "has_updates=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to last_count.txt - skipping CT analysis"
            echo "has_updates=false" >> "$GITHUB_OUTPUT"
          fi

      # -------------------------------------------------------
      # 3. Set up Python (only if updates found)
      # -------------------------------------------------------
      - name: Set up Python
        if: steps.check_updates.outputs.has_updates == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # -------------------------------------------------------
      # 4. Install Dependencies (only if updates found)
      # -------------------------------------------------------
      - name: Install Dependencies
        if: steps.check_updates.outputs.has_updates == 'true'
        run: pip install requests beautifulsoup4 openai

      # -------------------------------------------------------
      # 5. Get Latest Release Info
      # -------------------------------------------------------
      - name: Get Latest Release
        if: steps.check_updates.outputs.has_updates == 'true'
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          echo "Fetching the latest release from this repo..."
          response=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=10" | \
            python3 -c 'import json,sys; releases=json.load(sys.stdin); morpho_releases=[r for r in releases if r["tag_name"].startswith("morphosource-updates-")]; print(json.dumps(morpho_releases[0] if morpho_releases else releases[0]))')

          body=$(echo "$response" | python -c "import sys, json; print(json.load(sys.stdin)['body'])")
          tag_name=$(echo "$response" | python -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")

          echo "Found release tag_name=$tag_name"

          echo "release_body<<EOF" >> "$GITHUB_OUTPUT"
          echo "$body" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "release_tag=$tag_name" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 6. Check if morphosource-updates
      # -------------------------------------------------------
      - name: Check if morphosource-updates
        id: check_morpho
        run: |
          TAG_NAME="${{ steps.fetch_release.outputs.release_tag }}"
          echo "Found TAG_NAME=$TAG_NAME"

          if [[ "$TAG_NAME" == morphosource-updates-* ]]; then
            echo "is_morphosource=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_morphosource=false" >> "$GITHUB_OUTPUT"
          fi

      # -------------------------------------------------------
      # 7. Check for existing analysis
      # -------------------------------------------------------
      - name: Check for existing analysis
        id: check_analysis
        run: |
          # Get the morphosource release tag
          MS_TAG="${{ steps.fetch_release.outputs.release_tag }}"
          # Extract timestamp from the tag (assumes format morphosource-updates-YYYY-MM-DD_HH-MM-SS)
          MS_TIMESTAMP=$(echo "$MS_TAG" | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-9]\{2\}-[0-9]\{2\}-[0-9]\{2\}')
          # Convert to comparable format (remove underscores and dashes in time portion)
          MS_COMPARE=$(echo "$MS_TIMESTAMP" | sed 's/_\([0-9]\{2\}\)-\([0-9]\{2\}\)-\([0-9]\{2\}\)/T\1:\2:\3Z/')
          
          echo "Checking for analysis of MorphoSource release: $MS_TAG"
          echo "Release timestamp: $MS_COMPARE"
          
          # Get releases and save response for debugging
          response=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100")
          
          # Debug: Show all ct_to_text releases for today
          echo "CT to Text releases found:"
          echo "$response" | jq -r --arg ms_time "$MS_COMPARE" '.[] | 
            select(
              (.tag_name | startswith("ct_to_text_analysis-")) and
              (.created_at >= $ms_time)
            ) | {tag_name, created_at}'
          
          has_analysis=$(echo "$response" | jq -r --arg ms_time "$MS_COMPARE" "
            [.[] | 
            select(
              (.tag_name | startswith(\"ct_to_text_analysis-\")) and
              (.created_at >= \$ms_time)
            )] | length")
            
          echo "Number of matching analyses found after $MS_COMPARE: $has_analysis"
          
          if [ "$has_analysis" -gt "0" ]; then
            echo "CT to Text analysis already exists for $MS_TAG"
            echo "has_analysis=true" >> "$GITHUB_OUTPUT"
          else
            echo "No existing CT to Text analysis found for $MS_TAG"
            echo "has_analysis=false" >> "$GITHUB_OUTPUT"
          fi

      # -------------------------------------------------------
      # 8. Check Blacklist (Only if it's morphosource-updates)
      # -------------------------------------------------------
      - name: Check Blacklist
        id: check_blacklist
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true'
        run: |
          # Write release body to temp file
          echo "${{ steps.fetch_release.outputs.release_body }}" > temp_release.txt
          
          # Debug: Show contents of blacklist file
          echo "=== Blacklist Contents ==="
          cat .github/blacklist.txt
          echo "=========================="
          
          # Debug: Show what we're searching for
          echo "=== Searching Release Body For ==="
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ $line =~ ^#.*$ || -z $line ]] && continue
            # Trim whitespace
            line=$(echo "$line" | sed -e 's/[[:space:]]*$//')
            echo "Looking for: '$line'"
          done < .github/blacklist.txt
          echo "=============================="
          
          # Check if any blacklisted data managers are in the release
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip comments and empty lines
            [[ $line =~ ^#.*$ || -z $line ]] && continue
            
            # Trim whitespace
            line=$(echo "$line" | sed -e 's/[[:space:]]*$//')
            echo "Checking for: '$line'"
            
            # Use grep with exact line matching and word boundaries
            if grep -F -x "$line" temp_release.txt; then
              echo "Blacklisted data manager found: $line"
              echo "is_blacklisted=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          done < .github/blacklist.txt
          
          # Debug: If no match found, show the release body
          echo "=== Release Body Contents ==="
          echo "First 10 lines of release body:"
          head -n 10 temp_release.txt
          echo "..."
          echo "Data Manager lines:"
          grep "Data Manager:" temp_release.txt
          echo "==========================="
          
          echo "No blacklisted data managers found"
          echo "is_blacklisted=false" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 9. Generate Timestamp (Only if it's morphosource-updates)
      # -------------------------------------------------------
      - name: Generate Timestamp
        id: gen_ts
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true' &&
          steps.check_blacklist.outputs.is_blacklisted != 'true'
        run: |
          # Example format: YYYY-MM-DD_HH-MM-SS
          TS=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "timestamp=$TS" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 10. Run CT to Text (Only if it's morphosource-updates)
      # -------------------------------------------------------
      - name: Run CT to Text
        id: ct2text
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true' &&
          steps.check_blacklist.outputs.is_blacklisted != 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Write the release body to a file
          echo "${{ steps.fetch_release.outputs.release_body }}" > release_body.txt

          # Run your custom Python script
          python .github/scripts/ct_to_text.py release_body.txt > ct_output.txt

          # Export the script output (multi-line safe)
          echo "description<<EOF" >> "$GITHUB_OUTPUT"
          cat ct_output.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # -------------------------------------------------------
      # 11. Create or Update Release with AI Summary
      # -------------------------------------------------------
      - name: Create or Update Release with AI Summary
        if: |
          steps.check_morpho.outputs.is_morphosource == 'true' &&
          steps.check_analysis.outputs.has_analysis != 'true' &&
          steps.check_blacklist.outputs.is_blacklisted != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: "ct_to_text_analysis-${{ steps.gen_ts.outputs.timestamp }}"
          release_name: "CT to Text Analysis #${{ steps.gen_ts.outputs.timestamp }}"
          body: ${{ steps.ct2text.outputs.description }}
          draft: false
          prerelease: false

      # -------------------------------------------------------
      # 12. Log Blacklisted Release
      # -------------------------------------------------------
      - name: Log Blacklisted Release
        if: steps.check_blacklist.outputs.is_blacklisted == 'true'
        run: |
          echo "Release skipped due to blacklisted data manager"
          echo "Release tag: ${{ steps.fetch_release.outputs.release_tag }}"

      # -------------------------------------------------------
      # 13. Fallback step if not morphosource-updates
      # -------------------------------------------------------
      - name: No new morphosource release
        if: steps.check_morpho.outputs.is_morphosource == 'false'
        run: echo "No 'morphosource-updates-*' release found. Skipping CT-to-text analysis."

