name: Workflow Monitor

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]

jobs:
  monitor:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    permissions:
      issues: write
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Manage issues
        uses: actions/github-script@v7
        with:
          script: |
            const MAIN_ISSUE_TITLE = "üîç Workflow Failures Tracking";
            
            // Function to find or create the main tracking issue
            async function getMainIssue() {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.name,
                state: 'open',
                labels: ['workflow-tracker']
              });
              
              const mainIssue = issues.data.find(issue => issue.title === MAIN_ISSUE_TITLE);
              
              if (mainIssue) {
                return mainIssue;
              }
              
              // Create main tracking issue if it doesn't exist
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.name,
                title: MAIN_ISSUE_TITLE,
                body: `# Workflow Failures Dashboard
                This issue tracks all workflow failures in the repository.
                
                ## Active Failures
                No active failures yet.
                
                ## Resolved Failures
                No resolved failures yet.`,
                labels: ['workflow-tracker']
              });
              
              return newIssue.data;
            }
            
            // Create a sub-issue for the current failure
            async function createSubIssue(mainIssueNumber) {
              // Get workflow run details
              const run = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.name,
                run_id: context.payload.workflow_run.id
              });
              
              const subIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.name,
                title: `Failure: ${context.payload.workflow_run.name} (${new Date().toISOString().split('T')[0]})`,
                body: `
                ## Workflow Failure Details
                Parent issue: #${mainIssueNumber}
                
                ### Failed Workflow
                - Workflow: ${context.payload.workflow_run.name}
                - Run ID: ${context.payload.workflow_run.id}
                - Triggered by: ${run.data.head_commit.message || 'Unknown'}
                - Commit: ${run.data.head_commit.id || 'Unknown'}
                
                ### Links
                - [Failed Workflow Run](${context.payload.workflow_run.html_url})
                - [Workflow File](${context.payload.workflow_run.path})
                - [Commit](${run.data.head_commit.url || '#'})
                
                To see detailed logs, visit the workflow run link above.`,
                labels: ['workflow-failure', 'bug']
              });
              
              return subIssue.data;
            }
            
            // Update main issue with new failure
            async function updateMainIssue(mainIssue, subIssue) {
              const mainIssueBody = mainIssue.body;
              const newFailureEntry = `- [${subIssue.title}](${subIssue.html_url}) - Created ${new Date().toISOString().split('T')[0]}`;
              
              let updatedBody = mainIssueBody;
              if (mainIssueBody.includes('No active failures yet.')) {
                updatedBody = mainIssueBody.replace(
                  'No active failures yet.',
                  newFailureEntry
                );
              } else {
                updatedBody = mainIssueBody.replace(
                  '## Active Failures\n',
                  `## Active Failures\n${newFailureEntry}\n`
                );
              }
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.name,
                issue_number: mainIssue.number,
                body: updatedBody
              });
            }
            
            // Main execution
            try {
              const mainIssue = await getMainIssue();
              const subIssue = await createSubIssue(mainIssue.number);
              await updateMainIssue(mainIssue, subIssue);
              
              // Add comment to the failed commit
              if (context.payload.workflow_run.head_commit) {
                await github.rest.repos.createCommitComment({
                  owner: context.repo.owner,
                  repo: context.repo.name,
                  commit_sha: context.payload.workflow_run.head_sha,
                  body: `‚ö†Ô∏è Workflow "${context.payload.workflow_run.name}" failed. [View details](${subIssue.html_url})`
                });
              }
            } catch (error) {
              console.error('Error in workflow monitor:', error);
              core.setFailed(error.message);
            }
