name: Workflow Monitor

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]

jobs:
  monitor:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download workflow logs
        uses: actions/github-script@v7
        id: download-logs
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.name,
              run_id: context.payload.workflow_run.id,
            });
            
            const matchArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "workflow-logs"
            );
            
            if (!matchArtifact) {
              console.log('No logs found');
              return;
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.name,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });

      - name: Analyze failure
        id: analyze
        run: |
          # Extract the failed job and step information
          FAILED_JOB=$(jq -r '.jobs[] | select(.conclusion=="failure") | .name' ${GITHUB_EVENT_PATH})
          FAILED_STEP=$(jq -r '.jobs[] | select(.conclusion=="failure") | .steps[] | select(.conclusion=="failure") | .name' ${GITHUB_EVENT_PATH})
          
          # Get the relevant files that might be related to the failure
          FILES_CHANGED=$(git diff --name-only HEAD^)
          
          echo "::set-output name=failed_job::$FAILED_JOB"
          echo "::set-output name=failed_step::$FAILED_STEP"
          echo "::set-output name=files_changed::$FILES_CHANGED"

      - name: Manage issues
        uses: actions/github-script@v7
        with:
          script: |
            const MAIN_ISSUE_TITLE = "üîç Workflow Failures Tracking";
            
            // Function to find or create the main tracking issue
            async function getMainIssue() {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.name,
                state: 'open',
                labels: ['workflow-tracker'],
                creator: 'github-actions[bot]'
              });
              
              const mainIssue = issues.data.find(issue => issue.title === MAIN_ISSUE_TITLE);
              
              if (mainIssue) {
                return mainIssue;
              }
              
              // Create main tracking issue if it doesn't exist
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.name,
                title: MAIN_ISSUE_TITLE,
                body: `# Workflow Failures Dashboard
                This issue tracks all workflow failures in the repository.
                
                ## Active Failures
                No active failures yet.
                
                ## Resolved Failures
                No resolved failures yet.`,
                labels: ['workflow-tracker']
              });
              
              return newIssue.data;
            }
            
            // Create a sub-issue for the current failure
            async function createSubIssue(mainIssueNumber) {
              const failedJob = '${{ steps.analyze.outputs.failed_job }}';
              const failedStep = '${{ steps.analyze.outputs.failed_step }}';
              const filesChanged = '${{ steps.analyze.outputs.files_changed }}'.split('\n');
              
              const subIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.name,
                title: `Failure: ${context.payload.workflow_run.name} (${new Date().toISOString().split('T')[0]})`,
                body: `
                ## Workflow Failure Details
                Parent issue: #${mainIssueNumber}
                
                ### Failed Workflow
                - Workflow: ${context.payload.workflow_run.name}
                - Run ID: ${context.payload.workflow_run.id}
                - Job: ${failedJob}
                - Step: ${failedStep}
                
                ### Recent Changes
                The following files were modified in this run:
                ${filesChanged.map(file => `- \`${file}\``).join('\n')}
                
                ### Logs
                <details>
                <summary>Workflow Logs</summary>
                
                \`\`\`
                ${process.env.WORKFLOW_LOGS}
                \`\`\`
                </details>
                
                ### Links
                - [Failed Workflow Run](${context.payload.workflow_run.html_url})
                - [Workflow File](${context.payload.workflow_run.path})`,
                labels: ['workflow-failure', 'bug']
              });
              
              return subIssue.data;
            }
            
            // Update main issue with new failure
            async function updateMainIssue(mainIssue, subIssue) {
              const mainIssueBody = mainIssue.body;
              const newFailureEntry = `- [${subIssue.title}](${subIssue.html_url}) - Created ${new Date().toISOString().split('T')[0]}`;
              
              const updatedBody = mainIssueBody.replace(
                '## Active Failures\n',
                `## Active Failures\n${newFailureEntry}\n`
              );
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.name,
                issue_number: mainIssue.number,
                body: updatedBody
              });
            }
            
            // Main execution
            const mainIssue = await getMainIssue();
            const subIssue = await createSubIssue(mainIssue.number);
            await updateMainIssue(mainIssue, subIssue);
            
            // Add comment to the failed commit
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              commit_sha: context.payload.workflow_run.head_sha,
              body: `‚ö†Ô∏è Workflow "${context.payload.workflow_run.name}" failed. [View details](${subIssue.html_url})`
            });
