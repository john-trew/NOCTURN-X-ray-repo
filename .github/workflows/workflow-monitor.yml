name: Workflow Monitor

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]

jobs:
  monitor:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    permissions:
      issues: write
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Manage issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const MAIN_ISSUE_TITLE = "🔍 Workflow Failures Tracking";
            
            // Validate repository information
            if (!context.repo || !context.repo.owner || !context.repo.repo) {
              throw new Error('Repository information is missing from context');
            }
            
            // Function to find or create the main tracking issue
            async function getMainIssue() {
              try {
                console.log(`Searching for issues in ${context.repo.owner}/${context.repo.repo}`);
                
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open'
                });
                
                const mainIssue = issues.data.find(issue => issue.title === MAIN_ISSUE_TITLE);
                
                if (mainIssue) {
                  console.log('Found existing main issue:', mainIssue.number);
                  return mainIssue;
                }
                
                console.log('Creating new main issue...');
                const newIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: MAIN_ISSUE_TITLE,
                  body: `# Workflow Failures Dashboard
                  This issue tracks all workflow failures in the repository.
                  
                  ## Active Failures
                  No active failures yet.
                  
                  ## Resolved Failures
                  No resolved failures yet.`,
                  labels: ['workflow-tracker']
                });
                
                return newIssue.data;
              } catch (error) {
                console.error('Error in getMainIssue:', error);
                throw error;
              }
            }
            
            // Create a sub-issue for the current failure
            async function createSubIssue(mainIssueNumber) {
              try {
                console.log('Creating sub-issue for workflow failure...');
                
                // Basic workflow information that should always be available
                const workflowInfo = {
                  name: context.payload.workflow_run.name,
                  id: context.payload.workflow_run.id,
                  url: context.payload.workflow_run.html_url,
                  created_at: new Date().toISOString()
                };
                
                const subIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Failure: ${workflowInfo.name} (${workflowInfo.created_at.split('T')[0]})`,
                  body: `
                  ## Workflow Failure Details
                  Parent issue: #${mainIssueNumber}
                  
                  ### Failed Workflow
                  - Workflow: ${workflowInfo.name}
                  - Run ID: ${workflowInfo.id}
                  - Failed at: ${workflowInfo.created_at}
                  
                  ### Links
                  - [Failed Workflow Run](${workflowInfo.url})
                  
                  To see detailed logs, visit the workflow run link above.`,
                  labels: ['workflow-failure']
                });
                
                return subIssue.data;
              } catch (error) {
                console.error('Error in createSubIssue:', error);
                throw error;
              }
            }
            
            // Update main issue with new failure
            async function updateMainIssue(mainIssue, subIssue) {
              try {
                console.log('Updating main issue with new failure...');
                
                const mainIssueBody = mainIssue.body;
                const newFailureEntry = `- [${subIssue.title}](${subIssue.html_url}) - Created ${new Date().toISOString().split('T')[0]}`;
                
                let updatedBody = mainIssueBody;
                if (mainIssueBody.includes('No active failures yet.')) {
                  updatedBody = mainIssueBody.replace(
                    'No active failures yet.',
                    newFailureEntry
                  );
                } else {
                  updatedBody = mainIssueBody.replace(
                    '## Active Failures\n',
                    `## Active Failures\n${newFailureEntry}\n`
                  );
                }
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: mainIssue.number,
                  body: updatedBody
                });
              } catch (error) {
                console.error('Error in updateMainIssue:', error);
                throw error;
              }
            }
            
            // Main execution
            try {
              console.log('Starting workflow monitor...');
              const mainIssue = await getMainIssue();
              const subIssue = await createSubIssue(mainIssue.number);
              await updateMainIssue(mainIssue, subIssue);
              
              console.log('Successfully created and linked issues');
            } catch (error) {
              console.error('Fatal error in workflow monitor:', error);
              core.setFailed(`Workflow monitor failed: ${error.message}`);
            }
