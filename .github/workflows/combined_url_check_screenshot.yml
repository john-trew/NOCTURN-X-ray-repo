name: MorphoSource URL and Screenshot Check
on:
  release:
    types: [published]
  workflow_dispatch:
  workflow_run:
    workflows: ["CT to Text"]
    types: [completed]

jobs:
  url_check:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'release' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    outputs:
      is_morphosource: ${{ steps.check_morpho.outputs.is_morphosource }}
      has_media_error: ${{ steps.url_check.outputs.has_media_error }}
      has_server_error: ${{ steps.url_check.outputs.has_server_error }}
      has_mesh: ${{ steps.type_check.outputs.has_mesh }}
      has_volumetric_images: ${{ steps.type_check.outputs.has_volumetric_images }}
      release_body: ${{ steps.read_release_body.outputs.content }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install selenium webdriver-manager
          
      - name: Install and setup Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
          
      - name: Extract release URL
        id: release_info
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          # Create Python script to handle releases
          cat > process_release.py << 'END_SCRIPT'
          import json
          import re
          import sys
          import os
          
          def extract_url_from_body(body):
              if not body:
                  return None
              pattern = r'https://www\.morphosource\.org/concern/media/\d+'
              urls = re.findall(pattern, body)
              return urls if urls else None
          
          def process_releases(file_path):
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      data = json.load(f)
                      
                  if not isinstance(data, list):
                      data = [data]
                      
                  for release in data:
                      tag = release.get("tag_name", "")
                      body = release.get("body", "")
                      if tag and tag.startswith("morphosource-updates-"):
                          urls = extract_url_from_body(body)
                          if urls:
                              return {
                                  "found": True,
                                  "tag_name": tag,
                                  "urls": urls
                              }
                  
                  return {"found": False}
                  
              except Exception as e:
                  return {
                      "found": False,
                      "error": str(e)
                  }
          
          if __name__ == "__main__":
              result = process_releases("all_releases.json")
              print(json.dumps(result, indent=2))
          END_SCRIPT
          
          # Process the release data
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "workflow_run" ]]; then
            response=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases?per_page=10")
            echo "$response" > all_releases.json
          else
            echo '${{ toJSON(github.event.release) }}' > release.json
            echo "[$(cat release.json)]" > all_releases.json
          fi
          
          # Run the Python script and process results
          python process_release.py > release_out.json
          
          # Parse results safely using jq
          FOUND=$(cat release_out.json | jq -r '.found')
          if [[ "$FOUND" == "true" ]]; then
            TAG_NAME=$(cat release_out.json | jq -r '.tag_name')
            # Process URLs safely using jq
            jq -r '.urls[]' release_out.json > release_body.txt
            echo "release_tag=$TAG_NAME" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Check if morphosource-updates found
        id: check_morpho
        run: |
          TAG_NAME="${{ steps.release_info.outputs.release_tag }}"
          if [[ -z "$TAG_NAME" ]]; then
            echo "is_morphosource=false" >> "$GITHUB_OUTPUT"
          else
            echo "is_morphosource=true" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Run URL check
        id: url_check
        if: steps.check_morpho.outputs.is_morphosource == 'true'
        run: |
          python .github/scripts/url_screenshot_check.py release_body.txt || true
          if [ -f "url_check_status.json" ]; then
            status=$(cat url_check_status.json | jq -r .status)
            if [ "$status" = "media_error" ]; then
              echo "has_media_error=true" >> "$GITHUB_OUTPUT"
              echo "has_server_error=false" >> "$GITHUB_OUTPUT"
            elif [ "$status" = "server_error" ]; then
              echo "has_media_error=false" >> "$GITHUB_OUTPUT"
              echo "has_server_error=true" >> "$GITHUB_OUTPUT"
            else
              echo "has_media_error=false" >> "$GITHUB_OUTPUT"
              echo "has_server_error=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "has_media_error=false" >> "$GITHUB_OUTPUT"
            echo "has_server_error=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run 2D/3D Type Check
        id: type_check
        if: steps.check_morpho.outputs.is_morphosource == 'true'
        run: |
          python .github/scripts/2D3D_check.py release_body.txt || true
          if [ -f "url_check_status.json" ]; then
            has_mesh=$(cat url_check_status.json | jq -r .has_mesh)
            has_volumetric=$(cat url_check_status.json | jq -r .has_volumetric_images)
            echo "has_mesh=$has_mesh" >> "$GITHUB_OUTPUT"
            echo "has_volumetric_images=$has_volumetric" >> "$GITHUB_OUTPUT"
          else
            echo "has_mesh=false" >> "$GITHUB_OUTPUT"
            echo "has_volumetric_images=false" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Read release body
        id: read_release_body
        if: steps.check_morpho.outputs.is_morphosource == 'true'
        run: |
          if [ -f "release_body.txt" ]; then
            echo "content<<EOF" >> "$GITHUB_OUTPUT"
            cat release_body.txt >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload initial screenshots
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: initial_screenshots
          path: |
            *.png
            screenshots/error_*.png
            error_*.png

  take_screenshots:
    needs: url_check
    if: |
      needs.url_check.outputs.is_morphosource == 'true' && 
      needs.url_check.outputs.has_media_error != 'true' &&
      needs.url_check.outputs.has_server_error != 'true' &&
      (needs.url_check.outputs.has_mesh == 'true' || needs.url_check.outputs.has_volumetric_images == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install selenium webdriver-manager
          
      - name: Install and setup Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2 unzip
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb

      - name: Create screenshots directory
        run: mkdir -p screenshots

      - name: Copy release body from previous job
        run: |
          echo "${{ needs.url_check.outputs.release_body }}" > release_body.txt
          
      - name: Process URLs and take screenshots for 3D mesh
        if: needs.url_check.outputs.has_mesh == 'true'
        run: |
          python .github/scripts/3D_screenshot.py release_body.txt
          
      - name: Process URLs and take screenshots for volumetric images
        if: needs.url_check.outputs.has_volumetric_images == 'true'
        run: |
          python .github/scripts/2D_screenshot.py release_body.txt
          
      - name: Upload mesh screenshots
        if: needs.url_check.outputs.has_mesh == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: morphosource_3d_screenshots
          path: |
            *.png
            screenshots/*.png
            !error_*.png
            !screenshots/error_*.png
            
      - name: Upload volumetric screenshots
        if: needs.url_check.outputs.has_volumetric_images == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: morphosource_2d_screenshots
          path: |
            *.png
            screenshots/*.png
            !error_*.png
            !screenshots/error_*.png
            
      - name: Upload error screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: error_screenshots
          path: |
            error_*.png
            screenshots/error_*.png
