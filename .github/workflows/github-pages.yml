name: GitHub Pages Deployment

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  WORKFLOW_PAT: ${{ secrets.WORKFLOW_PAT }}
  DEBUG_LEVEL: "info"  # Can be set to debug, info, warning, error, critical

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git operations
      
      - name: Identify Workflow Trigger
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "This is a manual workflow run triggered by ${{ github.actor }}"
            echo "MANUAL=true" >> $GITHUB_ENV
            echo "DEBUG_LEVEL=debug" >> $GITHUB_ENV
            echo "::notice title=Manual Trigger::GitHub Pages update manually triggered by ${{ github.actor }}"
          else
            echo "This is a scheduled workflow run"
            echo "MANUAL=false" >> $GITHUB_ENV
            echo "::notice title=Scheduled Trigger::GitHub Pages update triggered by schedule"
          fi
          echo "GITHUB_PAGES_UPDATE_TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "::notice title=Deployment Start::GitHub Pages update started at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 markdown jinja2
          sudo apt-get update && sudo apt-get install -y jq
          
          # Create scripts directory if it doesn't exist
          mkdir -p .github/workflows/scripts
          chmod +x .github/workflows/scripts/pages-debug.py
          
          echo "::notice title=Dependencies::All dependencies installed successfully"
      
      - name: Setup Debug Mode
        run: |
          if [[ "$DEBUG_LEVEL" == "debug" ]]; then
            echo "::notice title=Debug Mode::Running in debug mode with verbose logging"
            echo "VERBOSE_FLAG=--verbose" >> $GITHUB_ENV
          else
            echo "VERBOSE_FLAG=" >> $GITHUB_ENV
          fi
          
      - name: Pre-Generation Debug Report
        run: |
          echo "::group::Pre-Generation Debug Info"
          python .github/workflows/scripts/pages-debug.py $VERBOSE_FLAG --check-branches
          echo "::endgroup::"
          
          # Create artifact directory for logs
          mkdir -p debug_logs
          cp github-pages-debug.log debug_logs/pre-generation-debug.log
          
          echo "::notice title=Pre-Generation Debug::Debug report generated before content creation"
          
      - name: Generate GitHub Pages Content
        id: generate-content
        run: |
          mkdir -p docs/assets/css
          mkdir -p docs/assets/js
          
          # Create CSS file for styling
          cat > docs/assets/css/style.css << 'EOL'
          body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #24292e;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
          }
          
          h1, h2, h3 {
            border-bottom: 1px solid #eaecef;
            padding-bottom: 0.3em;
          }
          
          .release-card {
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            padding: 16px;
            margin-bottom: 16px;
            background-color: #f6f8fa;
          }
          
          .release-card h3 {
            margin-top: 0;
            border-bottom: none;
          }
          
          .stats-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
          }
          
          .stat-card {
            flex: 1;
            min-width: 200px;
            background-color: #f6f8fa;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            padding: 16px;
            text-align: center;
          }
          
          .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #0366d6;
          }
          
          table {
            width: 100%;
            border-collapse: collapse;
          }
          
          table, th, td {
            border: 1px solid #e1e4e8;
          }
          
          th, td {
            padding: 8px 12px;
            text-align: left;
          }
          
          th {
            background-color: #f6f8fa;
          }
          
          tr:nth-child(even) {
            background-color: #f6f8fa;
          }
          
          .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eaecef;
            text-align: center;
            font-size: 12px;
            color: #6a737d;
          }
          EOL
          
          # Create JS file for interactive features
          cat > docs/assets/js/main.js << 'EOL'
          document.addEventListener('DOMContentLoaded', function() {
            // Add any interactive features here
            console.log('GitHub Pages for NOCTURN X-ray loaded');
            
            // Add click event to expandable sections if needed
            const expandButtons = document.querySelectorAll('.expand-button');
            expandButtons.forEach(button => {
              button.addEventListener('click', function() {
                const content = this.nextElementSibling;
                content.style.display = content.style.display === 'none' ? 'block' : 'none';
                this.textContent = content.style.display === 'none' ? 'Show Details' : 'Hide Details';
              });
            });
          });
          EOL
          
          # Generate the index.md file with release information
          python - << 'EOL'
          import os
          import json
          import glob
          import logging
          from datetime import datetime
          
          # Setup logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
              handlers=[
                  logging.StreamHandler(),
                  logging.FileHandler('content_generation.log')
              ]
          )
          logger = logging.getLogger('content-generator')
          
          if os.environ.get('DEBUG_LEVEL') == 'debug':
              logger.setLevel(logging.DEBUG)
          
          def get_latest_releases(data_dir='data', limit=10):
              logger.info(f"Searching for release data in {data_dir}")
              # Find all date-based directories
              date_dirs = glob.glob(os.path.join(data_dir, '20*-*-*_*-*-*'))
              
              if not date_dirs:
                  logger.warning(f"No release directories found in {data_dir}")
                  return []
              
              # Sort directories by name (which contains the date)
              date_dirs.sort(reverse=True)
              logger.info(f"Found {len(date_dirs)} release directories, using up to {limit}")
              
              releases = []
              for dir_path in date_dirs[:limit]:
                  logger.debug(f"Processing directory: {dir_path}")
                  release_notes_path = os.path.join(dir_path, 'release_notes.txt')
                  daily_info_path = os.path.join(dir_path, 'daily_info.json')
                  
                  if os.path.exists(release_notes_path):
                      logger.debug(f"Found release notes: {release_notes_path}")
                      with open(release_notes_path, 'r') as f:
                          notes_content = f.read()
                      
                      # Extract date from directory name
                      dir_name = os.path.basename(dir_path)
                      date_str = dir_name.split('_')[0].replace('-', '/')
                      
                      release_info = {
                          'date': date_str,
                          'path': dir_path,
                          'notes': notes_content
                      }
                      
                      # Add extra info from daily_info.json if available
                      if os.path.exists(daily_info_path):
                          try:
                              logger.debug(f"Found daily info: {daily_info_path}")
                              with open(daily_info_path, 'r') as f:
                                  daily_info = json.load(f)
                              release_info['daily_info'] = daily_info
                          except Exception as e:
                              logger.error(f"Error loading {daily_info_path}: {e}")
                      
                      releases.append(release_info)
                  else:
                      logger.warning(f"No release_notes.txt found in {dir_path}")
              
              logger.info(f"Processed {len(releases)} release directories successfully")
              return releases
          
          def generate_index_md(releases):
              logger.info("Generating index.md content")
              # Get the timestamp from environment variable
              update_timestamp = os.environ.get('GITHUB_PAGES_UPDATE_TIMESTAMP', datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'))
              
              content = f"""# NOCTURN X-ray Release Information

          This page displays information about the latest data releases for the NOCTURN X-ray project.

          **Last Updated:** {update_timestamp}

          ## Summary Statistics

          <div class="stats-container">
              <div class="stat-card">
                  <div>Total Releases</div>
                  <div class="stat-value">{len(releases)}</div>
              </div>
              <div class="stat-card">
                  <div>Latest Record ID</div>
                  <div class="stat-value">{get_latest_record_id(releases)}</div>
              </div>
              <div class="stat-card">
                  <div>Total Records</div>
                  <div class="stat-value">{get_total_records(releases)}</div>
              </div>
          </div>

          ## Recent Releases

          """
              
              for index, release in enumerate(releases):
                  date_str = release['date']
                  logger.debug(f"Adding release {index+1}: {date_str}")
                  content += f"""<div class="release-card">

          ### Release: {date_str}

          ```
          {release['notes']}
          ```

          </div>
          """
              
              content += """
          ## About NOCTURN X-ray

          NOCTURN is a project designed to streamline non-clinical tomographic imaging workflows across various facilities. Each facility may require its own custom scripts or configuration, which is why we have multiple branches for separate facility requirements.

          <div class="footer">
            <p>© NOCTURN X-ray Project. Deployed via GitHub Pages.</p>
            <p>This page is automatically updated hourly with the latest release information.</p>
          </div>
          """
              
              logger.info(f"Generated index.md content ({len(content)} characters)")
              return content
          
          def get_latest_record_id(releases):
              logger.debug("Extracting latest record ID")
              for release in releases:
                  notes = release['notes']
                  for line in notes.split('\n'):
                      if 'Record ID:' in line:
                          record_id = line.split('Record ID:')[1].strip()
                          logger.debug(f"Found latest record ID: {record_id}")
                          return record_id
              logger.warning("No Record ID found in any release notes")
              return "N/A"
          
          def get_total_records(releases):
              logger.debug("Extracting total records count")
              for release in releases:
                  notes = release['notes']
                  for line in notes.split('\n'):
                      if 'Total Records:' in line:
                          count = line.split('Total Records:')[1].strip()
                          logger.debug(f"Found total records count: {count}")
                          return count
              logger.warning("No Total Records count found in any release notes")
              return "N/A"
          
          # Main execution
          try:
              logger.info("Starting content generation")
              releases = get_latest_releases()
              if releases:
                  index_content = generate_index_md(releases)
                  
                  with open('docs/index.md', 'w') as f:
                      f.write(index_content)
                  
                  logger.info("Successfully wrote index.md")
              else:
                  logger.error("No releases found, cannot generate content")
                  
                  # Create a fallback index.md
                  with open('docs/index.md', 'w') as f:
                      f.write("""# NOCTURN X-ray Release Information

          **No release data is currently available. Please check back later.**

          This page is automatically updated hourly with the latest release information.
          """)
                  logger.info("Created fallback index.md")
          except Exception as e:
              logger.error(f"Error generating content: {e}")
              raise
          EOL
          
          # Configure Jekyll (_config.yml)
          cat > docs/_config.yml << 'EOL'
          title: NOCTURN X-ray Release Information
          description: Displaying information about the latest data releases for the NOCTURN X-ray project
          theme: jekyll-theme-cayman
          
          # GitHub Pages settings
          github:
            is_project_page: true
            repository_url: https://github.com/johntrue15/NOCTURN-X-ray-repo
          
          # Enable debugging info
          verbose: true
          EOL
          
          # Show generation log
          echo "::group::Content Generation Log"
          cat content_generation.log
          echo "::endgroup::"
          
          # Save log to debug logs directory
          cp content_generation.log debug_logs/
          
          echo "::notice title=Content Generation::GitHub Pages content generated successfully"
      
      - name: Post-Generation Debug Report
        run: |
          echo "::group::Post-Generation Debug Info"
          python .github/workflows/scripts/pages-debug.py $VERBOSE_FLAG --output-dir docs --check-branches
          echo "::endgroup::"
          
          # Save log to debug logs directory
          cp github-pages-debug.log debug_logs/post-generation-debug.log
          
          echo "::notice title=Post-Generation Debug::Debug report generated after content creation"
      
      - name: Upload Debug Logs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-debug-logs
          path: debug_logs/
          retention-days: 7
      
      - name: Setup Git Configuration
        run: |
          # Configure Git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep gh-pages; then
            echo "::notice title=Branch Check::gh-pages branch already exists"
          else
            echo "::notice title=Branch Check::gh-pages branch does not exist, will be created"
          fi
      
      - name: Deploy to gh-pages Branch
        run: |
          # Create a temporary directory for the gh-pages content
          GH_PAGES_DIR=$(mktemp -d)
          
          # Copy the docs directory to the temporary directory
          cp -r docs/* $GH_PAGES_DIR/
          
          # Save the current commit SHA for reference
          CURRENT_COMMIT=$(git rev-parse HEAD)
          
          # Check if gh-pages branch exists locally
          if git show-ref --verify --quiet refs/heads/gh-pages; then
            # Branch exists locally, checkout
            git checkout gh-pages
          else
            # Branch doesn't exist locally, create and checkout
            git checkout --orphan gh-pages
            git rm -rf . || true
          fi
          
          # Copy the content from the temporary directory
          cp -r $GH_PAGES_DIR/* .
          
          # Add all files
          git add .
          
          # Commit changes with a meaningful message including the source commit
          git commit -m "Update GitHub Pages from commit ${CURRENT_COMMIT}" --allow-empty
          
          # Push to gh-pages branch
          echo "::notice title=Pushing Changes::Pushing content to gh-pages branch"
          git push origin gh-pages
          
          # Return to the previous branch
          git checkout -
          
          echo "::notice title=Deployment Success::Content deployed to gh-pages branch"
      
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4
        
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment summary
        run: |
          echo "::notice title=Deployment Success::GitHub Pages deployed successfully from gh-pages branch"
          echo "::notice title=Deployment URL::View the site at ${{ steps.deployment.outputs.page_url }}"
          
          # Save deployment info to debug logs
          echo "Deployment URL: ${{ steps.deployment.outputs.page_url }}" > debug_logs/deployment_info.txt
          echo "Expected URL: https://johntrue15.github.io/NOCTURN-X-ray-repo/" >> debug_logs/deployment_info.txt
          echo "Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> debug_logs/deployment_info.txt
          echo "Deployed from branch: gh-pages" >> debug_logs/deployment_info.txt 