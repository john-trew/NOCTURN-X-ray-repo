name: GitHub Pages Content Generation

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write

# Allow only one concurrent content generation
concurrency:
  group: "content-gen"
  cancel-in-progress: false

env:
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  WORKFLOW_PAT: ${{ secrets.WORKFLOW_PAT }}
  DEBUG_LEVEL: "info"  # Can be set to debug, info, warning, error, critical

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git operations
      
      - name: Identify Workflow Trigger
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "This is a manual workflow run triggered by ${{ github.actor }}"
            echo "MANUAL=true" >> $GITHUB_ENV
            echo "DEBUG_LEVEL=debug" >> $GITHUB_ENV
            echo "::notice title=Manual Trigger::GitHub Pages update manually triggered by ${{ github.actor }}"
          else
            echo "This is a scheduled workflow run"
            echo "MANUAL=false" >> $GITHUB_ENV
            echo "::notice title=Scheduled Trigger::GitHub Pages update triggered by schedule"
          fi
          echo "GITHUB_PAGES_UPDATE_TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "::notice title=Generation Start::GitHub Pages content generation started at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 markdown jinja2
          sudo apt-get update && sudo apt-get install -y jq
          
          # Create scripts directory if it doesn't exist
          mkdir -p .github/workflows/scripts
          chmod +x .github/workflows/scripts/pages-debug.py
          
          echo "::notice title=Dependencies::All dependencies installed successfully"
      
      - name: Setup Debug Mode
        run: |
          if [[ "$DEBUG_LEVEL" == "debug" ]]; then
            echo "::notice title=Debug Mode::Running in debug mode with verbose logging"
            echo "VERBOSE_FLAG=--verbose" >> $GITHUB_ENV
          else
            echo "VERBOSE_FLAG=" >> $GITHUB_ENV
          fi
          
      - name: Pre-Generation Debug Report
        run: |
          echo "::group::Pre-Generation Debug Info"
          python .github/workflows/scripts/pages-debug.py $VERBOSE_FLAG --check-branches
          echo "::endgroup::"
          
          # Create artifact directory for logs
          mkdir -p debug_logs
          cp github-pages-debug.log debug_logs/pre-generation-debug.log
          
          echo "::notice title=Pre-Generation Debug::Debug report generated before content creation"
          
      - name: Generate GitHub Pages Content
        id: generate-content
        run: |
          mkdir -p docs/assets/css
          mkdir -p docs/assets/js
          
          # Create CSS file for styling
          cat > docs/assets/css/style.css << 'EOL'
          body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #24292e;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
          }
          
          h1, h2, h3 {
            border-bottom: 1px solid #eaecef;
            padding-bottom: 0.3em;
          }
          
          .release-card {
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            padding: 16px;
            margin-bottom: 16px;
            background-color: #f6f8fa;
          }
          
          .release-card h3, .release-card h4 {
            margin-top: 0;
            border-bottom: none;
          }
          
          .stats-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
          }
          
          .stat-card {
            flex: 1;
            min-width: 150px;
            background-color: #f6f8fa;
            border: 1px solid #e1e4e8;
            border-radius: 6px;
            padding: 16px;
            text-align: center;
          }
          
          .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #0366d6;
          }
          
          .release-group {
            margin-bottom: 30px;
          }
          
          table.releases-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 30px;
          }
          
          table.releases-table, table.releases-table th, table.releases-table td {
            border: 1px solid #e1e4e8;
          }
          
          table.releases-table th, table.releases-table td {
            padding: 8px 12px;
            text-align: left;
          }
          
          table.releases-table th {
            background-color: #f6f8fa;
            font-weight: 600;
          }
          
          table.releases-table tr:nth-child(even) {
            background-color: #f6f8fa;
          }
          
          table.releases-table tr:hover {
            background-color: #f1f8ff;
          }
          
          .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eaecef;
            text-align: center;
            font-size: 12px;
            color: #6a737d;
          }
          EOL
          
          # Create JS file for interactive features
          cat > docs/assets/js/main.js << 'EOL'
          document.addEventListener('DOMContentLoaded', function() {
            // Add any interactive features here
            console.log('GitHub Pages for NOCTURN X-ray loaded');
            
            // Add click event to expandable sections if needed
            const expandButtons = document.querySelectorAll('.expand-button');
            expandButtons.forEach(button => {
              button.addEventListener('click', function() {
                const content = this.nextElementSibling;
                content.style.display = content.style.display === 'none' ? 'block' : 'none';
                this.textContent = content.style.display === 'none' ? 'Show Details' : 'Hide Details';
              });
            });
          });
          EOL
          
          # Generate the index.md file with release information
          python - << 'EOL'
          import os
          import json
          import glob
          import logging
          import re
          import subprocess
          from datetime import datetime
          from collections import defaultdict
          import markdown
          
          # Setup logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
              handlers=[
                  logging.StreamHandler(),
                  logging.FileHandler('content_generation.log')
              ]
          )
          logger = logging.getLogger('content-generator')
          
          if os.environ.get('DEBUG_LEVEL') == 'debug':
              logger.setLevel(logging.DEBUG)
          
          def get_github_releases():
              """Get all GitHub releases using git command"""
              logger.info("Fetching GitHub releases")
              
              try:
                  # Fetch all tags
                  subprocess.run(["git", "fetch", "--tags"], check=True)
                  
                  # Get all tags
                  result = subprocess.run(
                      ["git", "tag", "-l"], 
                      capture_output=True, 
                      text=True, 
                      check=True
                  )
                  tags = result.stdout.strip().split('\n')
                  logger.info(f"Found {len(tags)} tags")
                  
                  # Process each tag
                  releases = []
                  release_types = defaultdict(int)
                  
                  for tag in tags:
                      if not tag:
                          continue
                      
                      # Extract release type and date from tag
                      release_type = None
                      date = None
                      
                      # Pattern matching for different release types
                      patterns = [
                          (r'(ct_to_text_analysis|ct-to-text-analysis)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'CT to Text Analysis'),
                          (r'(daily-check|daily_check)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'Daily Check'),
                          (r'(daily)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'Daily'),
                          (r'(morphosource-updates|morphosource_updates)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'MorphoSource Updates'),
                          (r'(morphosource-modified|morphosource_modified)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'MorphoSource Modified'),
                          (r'(morphosource-check)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'MorphoSource Check'),
                          (r'(ct-image-analysis|ct_image_analysis)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'CT Image Analysis'),
                          (r'(ct-slice-analysis|ct_slice_analysis)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'CT Slice Analysis'),
                          (r'(monthly-collection)-(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', 'Monthly Collection'),
                          (r'(ct_analysis_error)-(\d+)', 'CT Analysis Error'),
                      ]
                      
                      for pattern, type_name in patterns:
                          match = re.search(pattern, tag, re.IGNORECASE)
                          if match:
                              release_type = type_name
                              date = match.group(2)
                              break
                      
                      # Skip releases that don't match our patterns
                      if not release_type or not date:
                          logger.debug(f"Skipping tag {tag} - doesn't match any known release pattern")
                          continue
                      
                      # Get release description
                      try:
                          result = subprocess.run(
                              ["git", "tag", "-l", "-n999", tag], 
                              capture_output=True, 
                              text=True, 
                              check=True
                          )
                          description = result.stdout.strip()
                          # Remove the tag name from the beginning of the description
                          if description.startswith(tag):
                              description = description[len(tag):].strip()
                      except subprocess.CalledProcessError:
                          description = "No description available"
                      
                      # Format date for display (if it's a date-based tag)
                      display_date = date
                      if re.match(r'\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}', date):
                          # Split into date and time parts
                          date_part, time_part = date.split('_')
                          # Format date as YYYY/MM/DD and time as HH:MM:SS UTC
                          display_date = date_part.replace('-', '/') + ' ' + time_part.replace('-', ':') + ' UTC'
                      
                      # Extract image URLs for CT Image Analysis releases
                      image_urls = []
                      if release_type == 'CT Image Analysis':
                          # For CT Image Analysis releases, try to extract images from release assets
                          # Get release assets using GitHub API
                          try:
                              if os.environ.get('MY_GITHUB_TOKEN'):
                                  import requests
                                  
                                  # Use GitHub API to get release by tag
                                  headers = {"Authorization": f"token {os.environ.get('MY_GITHUB_TOKEN')}"}
                                  repo = os.environ.get('GITHUB_REPOSITORY', 'johntrue15/NOCTURN-X-ray-repo')
                                  api_url = f"https://api.github.com/repos/{repo}/releases/tags/{tag}"
                                  
                                  logger.info(f"Fetching assets for release {tag} from {api_url}")
                                  response = requests.get(api_url, headers=headers)
                                  
                                  if response.status_code == 200:
                                      release_data = response.json()
                                      
                                      # Get assets
                                      if 'assets' in release_data and release_data['assets']:
                                          logger.info(f"Found {len(release_data['assets'])} assets for release {tag}")
                                          
                                          # Priority order for orientation view images
                                          orientation_images = [
                                              "Default_Yplus_Up.png",
                                              "Upside_Down_Y-_Up.png", 
                                              "Forward_90_Z-_Up.png",
                                              "Back_90_Zplus_Up.png"
                                          ]
                                          
                                          # Find orientation view images first
                                          found_images = {}
                                          for asset in release_data['assets']:
                                              asset_name = asset.get('name', '')
                                              if asset_name in orientation_images:
                                                  found_images[asset_name] = asset.get('browser_download_url')
                                          
                                          # Add orientation images in specific order
                                          for img_name in orientation_images:
                                              if img_name in found_images:
                                                  image_urls.append(found_images[img_name])
                                          
                                          # If we don't have enough orientation images, look for any other PNG files
                                          if len(image_urls) < 4:
                                              for asset in release_data['assets']:
                                                  asset_name = asset.get('name', '')
                                                  if asset_name.lower().endswith('.png') and asset_name not in orientation_images:
                                                      image_urls.append(asset.get('browser_download_url'))
                                                      if len(image_urls) >= 4:
                                                          break
                                          
                                          # Use the full release body text from the API response instead of git tag description
                                          if 'body' in release_data and release_data['body']:
                                              # Replace the git tag description with the actual release body
                                              description = release_data['body']
                                              # Process the description to handle Markdown formatting
                                              try:
                                                  # Convert Markdown to HTML for better rendering
                                                  description = markdown.markdown(description)
                                              except Exception as e:
                                                  logger.warning(f"Error converting markdown to HTML: {str(e)}")
                                              logger.info(f"Using full release body from GitHub API for {tag}")
                          except Exception as e:
                              logger.error(f"Error fetching release assets: {str(e)}")
                          
                          # If no images found from assets, try searching in the description
                          if not image_urls:
                              # Look for image links in the description
                              img_matches = re.findall(r'!\[.*?\]\((.*?)\)', description)
                              for img_url in img_matches:
                                  image_urls.append(img_url)
                              
                              # If no images found with markdown syntax, try searching for URLs that look like images
                              if not image_urls:
                                  url_matches = re.findall(r'https?://\S+\.(jpg|jpeg|png|gif|webp)', description, re.IGNORECASE)
                                  for url in url_matches:
                                      image_urls.append(url)
                          
                          # If still no images found, add placeholder URLs for demo
                          if not image_urls:
                              # Add placeholder images for demonstration
                              image_urls = [
                                  f"https://via.placeholder.com/800x600.png?text=Default+(Y%2B+Up)",
                                  f"https://via.placeholder.com/800x600.png?text=Upside+Down+(Y-+Up)",
                                  f"https://via.placeholder.com/800x600.png?text=Forward+90°+(Z-+Up)",
                                  f"https://via.placeholder.com/800x600.png?text=Back+90°+(Z%2B+Up)"
                              ]
                      
                      release_info = {
                          'tag': tag,
                          'type': release_type,
                          'date': date,
                          'display_date': display_date,
                          'description': description,
                          'image_urls': image_urls
                      }
                      
                      releases.append(release_info)
                      release_types[release_type] += 1
                      
                  # Define a custom sorting function to handle different tag formats
                  def sort_key(x):
                      if re.match(r'\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}', x['date']):
                          # For date-based tags, convert to a timestamp for sorting
                          return x['date']
                      elif x['date'].isdigit():
                          # For numeric ID tags, pad with zeros for proper sorting
                          return f"{int(x['date']):020d}"
                      else:
                          # Default fallback
                          return x['date']
                          
                  # Sort releases (newest first)
                  releases.sort(key=sort_key, reverse=True)
                  logger.info(f"Processed {len(releases)} releases")
                  
                  return releases, release_types
                  
              except subprocess.CalledProcessError as e:
                  logger.error(f"Error getting GitHub releases: {e}")
                  return [], {}
                  
              except Exception as e:
                  logger.error(f"Unexpected error getting GitHub releases: {e}")
                  return [], {}
          
          def get_latest_releases(data_dir='data', limit=10):
              """Get data from filesystem-based releases (legacy method)"""
              logger.info(f"Searching for legacy release data in {data_dir}")
              # Find all date-based directories
              date_dirs = glob.glob(os.path.join(data_dir, '20*-*-*_*-*-*'))
              
              if not date_dirs:
                  logger.warning(f"No release directories found in {data_dir}")
                  return []
              
              # Sort directories by name (which contains the date)
              date_dirs.sort(reverse=True)
              logger.info(f"Found {len(date_dirs)} release directories, using up to {limit}")
              
              releases = []
              for dir_path in date_dirs[:limit]:
                  logger.debug(f"Processing directory: {dir_path}")
                  release_notes_path = os.path.join(dir_path, 'release_notes.txt')
                  daily_info_path = os.path.join(dir_path, 'daily_info.json')
                  
                  if os.path.exists(release_notes_path):
                      logger.debug(f"Found release notes: {release_notes_path}")
                      with open(release_notes_path, 'r') as f:
                          notes_content = f.read()
                      
                      # Extract date from directory name
                      dir_name = os.path.basename(dir_path)
                      date_str = dir_name.split('_')[0].replace('-', '/')
                      
                      release_info = {
                          'date': date_str,
                          'path': dir_path,
                          'notes': notes_content,
                          'type': 'Daily Check'  # Default to Daily Check for legacy releases
                      }
                      
                      # Add extra info from daily_info.json if available
                      if os.path.exists(daily_info_path):
                          try:
                              logger.debug(f"Found daily info: {daily_info_path}")
                              with open(daily_info_path, 'r') as f:
                                  daily_info = json.load(f)
                              release_info['daily_info'] = daily_info
                          except Exception as e:
                              logger.error(f"Error loading {daily_info_path}: {e}")
                      
                      releases.append(release_info)
                  else:
                      logger.warning(f"No release_notes.txt found in {dir_path}")
              
              logger.info(f"Processed {len(releases)} release directories successfully")
              return releases
          
          def generate_index_md(github_releases, release_types, legacy_releases=[]):
              """Generate the index.md content with all releases organized by type"""
              logger.info("Generating index.md content")
              # Get the timestamp from environment variable
              update_timestamp = os.environ.get('GITHUB_PAGES_UPDATE_TIMESTAMP', datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'))
              
              # Start building the content
              content = f"""# NOCTURN X-ray Release Information

          This page displays information about the latest data releases for the NOCTURN X-ray project.

          **Last Updated:** {update_timestamp}

          ## Summary Statistics

          <div class="stats-container">
              <div class="stat-card">
                  <div>Total Releases</div>
                  <div class="stat-value">{len(github_releases)}</div>
              </div>
          """
              
              # Add stats for each release type
              for release_type, count in release_types.items():
                  content += f"""    <div class="stat-card">
                  <div>{release_type}</div>
                  <div class="stat-value">{count}</div>
              </div>
          """
              
              # Close the stats container
              content += """</div>

          ## Releases by Type

          <table class="releases-table">
              <tr>
                  <th>Type</th>
                  <th>Date & Time</th>
                  <th>Tag</th>
              </tr>
          """
              
              # Add rows for each release
              for release in github_releases[:50]:  # Limit to 50 most recent
                  content += f"""    <tr>
                  <td>{release['type']}</td>
                  <td>{release['display_date']}</td>
                  <td><a href="https://github.com/johntrue15/NOCTURN-X-ray-repo/releases/tag/{release['tag']}">{release['tag']}</a></td>
              </tr>
          """
              
              # Close the table
              content += """</table>

          ## Recent Releases by Type
          """
              
              # Group releases by type
              releases_by_type = defaultdict(list)
              for release in github_releases:
                  releases_by_type[release['type']].append(release)
              
              # Add sections for each type
              for release_type, releases in releases_by_type.items():
                  content += f"""
          ### {release_type}
          
          <div class="release-group">
          """
                  # Add up to 5 most recent releases of this type
                  for release in releases[:5]:
                      content += f"""<div class="release-card">
              <h4>{release['display_date']} - <a href="https://github.com/johntrue15/NOCTURN-X-ray-repo/releases/tag/{release['tag']}">{release['tag']}</a></h4>
              
              ```
              {release['description'] if len(release['description']) < 500 else release['description'][:500] + '... (truncated)'}
              ```
          </div>
          """
                  
                  content += """</div>
          """
              
              # Add link to image analysis page if CT Image Analysis releases exist
              if 'CT Image Analysis' in release_types and release_types['CT Image Analysis'] > 0:
                  content += """
          ## Specialized Views

          - [CT Image Analysis Gallery](/image_analysis.html) - View CT scan images in an Instagram-style timeline

          """
              
              # Add footer
              content += """
          ## About NOCTURN X-ray

          NOCTURN is a project designed to streamline non-clinical tomographic imaging workflows across various facilities. Each facility may require its own custom scripts or configuration, which is why we have multiple branches for separate facility requirements.

          <div class="footer">
            <p>© NOCTURN X-ray Project. Deployed via GitHub Pages.</p>
            <p>This page is automatically updated hourly with the latest release information.</p>
          </div>
          """
              
              logger.info(f"Generated index.md content ({len(content)} characters)")
              return content
          
          def generate_image_analysis_page(github_releases):
              """Generate a dedicated page for CT Image Analysis releases with Instagram-style layout"""
              logger.info("Generating image_analysis.md content")
              
              # Get CT Image Analysis releases only
              ct_image_releases = [r for r in github_releases if r['type'] == 'CT Image Analysis']
              
              if not ct_image_releases:
                  logger.warning("No CT Image Analysis releases found for gallery page")
                  return None
              
              # Get the timestamp from environment variable
              update_timestamp = os.environ.get('GITHUB_PAGES_UPDATE_TIMESTAMP', datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'))
              
              # Start building the content
              content = f"""# CT Image Analysis Gallery

          This page displays CT scan images from analysis releases in an Instagram-style timeline.

          **Last Updated:** {update_timestamp}

          <link rel="stylesheet" href="assets/css/gallery.css">

          <div class="gallery-container">
          """
              
              # Add each release as a timeline entry
              for release in ct_image_releases:
                  content += f"""
          <div class="gallery-item">
              <div class="gallery-header">
                  <h2>{release['display_date']}</h2>
                  <h3><a href="https://github.com/johntrue15/NOCTURN-X-ray-repo/releases/tag/{release['tag']}">{release['tag']}</a></h3>
              </div>
              
              <div class="image-grid">
              """
                  
                  # Add images in a grid
                  for idx, img_url in enumerate(release['image_urls'][:4]):  # Limit to 4 images
                      content += f"""          <div class="image-item">
                      <img src="{img_url}" alt="CT Image {idx+1}" loading="lazy">
                  </div>
              """
                  
                  # Close the image grid
                  content += """        </div>
              
              <div class="release-description">
              """
                  
                  # Add the release description with improved formatting
                  content += f"""          <div class="description-text">
                      {release['description']}
                  </div>
              """
                  
                  # Close the release description and gallery item
                  content += """        </div>
          </div>

          <div class="timeline-separator"></div>
          """
              
              # Close the gallery container
              content += """      </div>

          <script src="assets/js/gallery.js"></script>

          <div class="footer">
            <p>© NOCTURN X-ray Project. Deployed via GitHub Pages.</p>
            <p>Return to <a href="index.html">main dashboard</a>.</p>
          </div>
          """
              
              logger.info(f"Generated image_analysis.md content ({len(content)} characters)")
              return content
          
          # Main execution
          try:
              logger.info("Starting content generation")
              
              # Get GitHub releases
              github_releases, release_types = get_github_releases()
              
              # Get legacy releases for backup
              legacy_releases = get_latest_releases()
              
              if github_releases:
                  # Generate content using GitHub releases
                  index_content = generate_index_md(github_releases, release_types, legacy_releases)
                  
                  with open('docs/index.md', 'w') as f:
                      f.write(index_content)
                  
                  logger.info("Successfully wrote index.md")
                  
                  # Generate the image analysis page if there are CT Image Analysis releases
                  if 'CT Image Analysis' in release_types and release_types['CT Image Analysis'] > 0:
                      image_analysis_content = generate_image_analysis_page(github_releases)
                      
                      if image_analysis_content:
                          with open('docs/image_analysis.md', 'w') as f:
                              f.write(image_analysis_content)
                          
                          # Create a separate HTML file with Jekyll front matter
                          with open('docs/image_analysis.html', 'w') as f:
                              f.write("---\n")
                              f.write("layout: default\n")
                              f.write("title: CT Image Analysis Gallery\n")
                              f.write("---\n\n")
                              f.write(image_analysis_content)
                          
                          logger.info("Successfully wrote image_analysis.md and image_analysis.html")
                          
                          # Create CSS and JS for the gallery by writing files separately
                          os.makedirs('docs/assets/css', exist_ok=True)
                          os.makedirs('docs/assets/js', exist_ok=True)
                          
                          # Write gallery CSS content
                          gallery_css_content = "/* Gallery page styles */\n"
                          gallery_css_content += ".gallery-container {\n"
                          gallery_css_content += "  max-width: 900px;\n"
                          gallery_css_content += "  margin: 0 auto;\n"
                          gallery_css_content += "  padding: 20px 0;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".gallery-item {\n"
                          gallery_css_content += "  background-color: #fff;\n"
                          gallery_css_content += "  border-radius: 8px;\n"
                          gallery_css_content += "  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n"
                          gallery_css_content += "  margin-bottom: 40px;\n"
                          gallery_css_content += "  overflow: hidden;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".gallery-header {\n"
                          gallery_css_content += "  padding: 16px;\n"
                          gallery_css_content += "  border-bottom: 1px solid #eee;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".gallery-header h2 {\n"
                          gallery_css_content += "  margin: 0;\n"
                          gallery_css_content += "  font-size: 18px;\n"
                          gallery_css_content += "  border-bottom: none;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".gallery-header h3 {\n"
                          gallery_css_content += "  margin: 4px 0 0;\n"
                          gallery_css_content += "  font-size: 14px;\n"
                          gallery_css_content += "  font-weight: normal;\n"
                          gallery_css_content += "  color: #666;\n"
                          gallery_css_content += "  border-bottom: none;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".image-grid {\n"
                          gallery_css_content += "  display: grid;\n"
                          gallery_css_content += "  grid-template-columns: repeat(2, 1fr);\n"
                          gallery_css_content += "  grid-gap: 4px;\n"
                          gallery_css_content += "  background-color: #f8f8f8;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".image-item {\n"
                          gallery_css_content += "  position: relative;\n"
                          gallery_css_content += "  padding-bottom: 100%;\n"
                          gallery_css_content += "  overflow: hidden;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".image-item img {\n"
                          gallery_css_content += "  position: absolute;\n"
                          gallery_css_content += "  top: 0;\n"
                          gallery_css_content += "  left: 0;\n"
                          gallery_css_content += "  width: 100%;\n"
                          gallery_css_content += "  height: 100%;\n"
                          gallery_css_content += "  object-fit: cover;\n"
                          gallery_css_content += "  transition: transform 0.3s ease;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".image-item img:hover {\n"
                          gallery_css_content += "  transform: scale(1.05);\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".release-description {\n"
                          gallery_css_content += "  padding: 16px;\n"
                          gallery_css_content += "  background-color: #fff;\n"
                          gallery_css_content += "  border-top: 1px solid #eee;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".description-text {\n"
                          gallery_css_content += "  white-space: pre-wrap;\n"
                          gallery_css_content += "  line-height: 1.6;\n"
                          gallery_css_content += "  overflow-wrap: break-word;\n"
                          gallery_css_content += "  font-size: 14px;\n"
                          gallery_css_content += "  padding: 0 10px;\n"
                          gallery_css_content += "  max-height: none;\n"
                          gallery_css_content += "  color: #333;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".description-text h1, .description-text h2, .description-text h3 {\n"
                          gallery_css_content += "  margin-top: 16px;\n"
                          gallery_css_content += "  margin-bottom: 8px;\n"
                          gallery_css_content += "  border-bottom: none;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".description-text ul, .description-text ol {\n"
                          gallery_css_content += "  padding-left: 20px;\n"
                          gallery_css_content += "  margin: 8px 0;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".timeline-separator {\n"
                          gallery_css_content += "  height: 60px;\n"
                          gallery_css_content += "  position: relative;\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += ".timeline-separator:after {\n"
                          gallery_css_content += "  content: '';\n"
                          gallery_css_content += "  position: absolute;\n"
                          gallery_css_content += "  top: 0;\n"
                          gallery_css_content += "  left: 50%;\n"
                          gallery_css_content += "  height: 100%;\n"
                          gallery_css_content += "  width: 2px;\n"
                          gallery_css_content += "  background-color: #ddd;\n"
                          gallery_css_content += "  transform: translateX(-50%);\n"
                          gallery_css_content += "}\n\n"
                          
                          gallery_css_content += "/* Responsive adjustments */\n"
                          gallery_css_content += "@media (max-width: 640px) {\n"
                          gallery_css_content += "  .image-grid {\n"
                          gallery_css_content += "    grid-template-columns: 1fr;\n"
                          gallery_css_content += "  }\n"
                          gallery_css_content += "}"
                          
                          with open('docs/assets/css/gallery.css', 'w') as f:
                              f.write(gallery_css_content)
                          
                          # Write gallery JS content
                          gallery_js_content = "document.addEventListener('DOMContentLoaded', function() {\n"
                          gallery_js_content += "  // Add image click handler for lightbox effect\n"
                          gallery_js_content += "  const images = document.querySelectorAll('.image-item img');\n"
                          gallery_js_content += "  \n"
                          gallery_js_content += "  images.forEach(img => {\n"
                          gallery_js_content += "    img.addEventListener('click', function() {\n"
                          gallery_js_content += "      // Create lightbox\n"
                          gallery_js_content += "      const lightbox = document.createElement('div');\n"
                          gallery_js_content += "      lightbox.className = 'lightbox';\n"
                          gallery_js_content += "      lightbox.style.position = 'fixed';\n"
                          gallery_js_content += "      lightbox.style.top = '0';\n"
                          gallery_js_content += "      lightbox.style.left = '0';\n"
                          gallery_js_content += "      lightbox.style.width = '100%';\n"
                          gallery_js_content += "      lightbox.style.height = '100%';\n"
                          gallery_js_content += "      lightbox.style.backgroundColor = 'rgba(0,0,0,0.9)';\n"
                          gallery_js_content += "      lightbox.style.display = 'flex';\n"
                          gallery_js_content += "      lightbox.style.alignItems = 'center';\n"
                          gallery_js_content += "      lightbox.style.justifyContent = 'center';\n"
                          gallery_js_content += "      lightbox.style.zIndex = '1000';\n"
                          gallery_js_content += "      \n"
                          gallery_js_content += "      // Create image element\n"
                          gallery_js_content += "      const fullImg = document.createElement('img');\n"
                          gallery_js_content += "      fullImg.src = this.src;\n"
                          gallery_js_content += "      fullImg.style.maxHeight = '90%';\n"
                          gallery_js_content += "      fullImg.style.maxWidth = '90%';\n"
                          gallery_js_content += "      fullImg.style.objectFit = 'contain';\n"
                          gallery_js_content += "      \n"
                          gallery_js_content += "      // Add close on click\n"
                          gallery_js_content += "      lightbox.addEventListener('click', function() {\n"
                          gallery_js_content += "        document.body.removeChild(lightbox);\n"
                          gallery_js_content += "      });\n"
                          gallery_js_content += "      \n"
                          gallery_js_content += "      // Append to lightbox and body\n"
                          gallery_js_content += "      lightbox.appendChild(fullImg);\n"
                          gallery_js_content += "      document.body.appendChild(lightbox);\n"
                          gallery_js_content += "    });\n"
                          gallery_js_content += "  });\n"
                          gallery_js_content += "  \n"
                          gallery_js_content += "  // Lazy loading for images\n"
                          gallery_js_content += "  if ('IntersectionObserver' in window) {\n"
                          gallery_js_content += "    const lazyImages = document.querySelectorAll('img[loading=\"lazy\"]');\n"
                          gallery_js_content += "    const imageObserver = new IntersectionObserver((entries, observer) => {\n"
                          gallery_js_content += "      entries.forEach(entry => {\n"
                          gallery_js_content += "        if (entry.isIntersecting) {\n"
                          gallery_js_content += "          const img = entry.target;\n"
                          gallery_js_content += "          img.src = img.dataset.src || img.src;\n"
                          gallery_js_content += "          imageObserver.unobserve(img);\n"
                          gallery_js_content += "        }\n"
                          gallery_js_content += "      });\n"
                          gallery_js_content += "    });\n"
                          gallery_js_content += "    \n"
                          gallery_js_content += "    lazyImages.forEach(img => {\n"
                          gallery_js_content += "      imageObserver.observe(img);\n"
                          gallery_js_content += "    });\n"
                          gallery_js_content += "  }\n"
                          gallery_js_content += "});"
                          
                          with open('docs/assets/js/gallery.js', 'w') as f:
                              f.write(gallery_js_content)
                          
                          logger.info("Successfully created gallery CSS and JS")
                  
              elif legacy_releases:
                  # Fallback to legacy releases if no GitHub releases
                  logger.warning("No GitHub releases found, falling back to legacy releases")
                  release_types = defaultdict(int)
                  release_types['Daily Check'] = len(legacy_releases)
                  
                  # Convert legacy releases to GitHub release format
                  github_style_releases = []
                  for release in legacy_releases:
                      github_style_releases.append({
                          'tag': f"daily-check-{release['date'].replace('/', '-')}",
                          'type': 'Daily Check',
                          'date': release['date'].replace('/', '-'),
                          'display_date': release['date'],
                          'description': release['notes'][:500] if len(release['notes']) > 500 else release['notes']
                      })
                  
                  index_content = generate_index_md(github_style_releases, release_types)
                  
                  with open('docs/index.md', 'w') as f:
                      f.write(index_content)
                  
                  logger.info("Successfully wrote index.md using legacy releases")
              else:
                  logger.error("No releases found, cannot generate content")
                  
                  # Create a fallback index.md
                  with open('docs/index.md', 'w') as f:
                      f.write("""# NOCTURN X-ray Release Information

          **No release data is currently available. Please check back later.**

          This page is automatically updated hourly with the latest release information.
          """)
                  logger.info("Created fallback index.md")
          except Exception as e:
              logger.error(f"Error generating content: {e}")
              raise
          EOL
          
          # Configure Jekyll (_config.yml)
          cat > docs/_config.yml << 'EOL'
          title: NOCTURN X-ray Release Information
          description: Displaying information about the latest data releases for the NOCTURN X-ray project
          theme: jekyll-theme-cayman
          
          # GitHub Pages settings
          github:
            is_project_page: true
            repository_url: https://github.com/johntrue15/NOCTURN-X-ray-repo
          
          # Enable debugging info
          verbose: true
          EOL
          
          # Show generation log
          echo "::group::Content Generation Log"
          cat content_generation.log
          echo "::endgroup::"
          
          # Save log to debug logs directory
          cp content_generation.log debug_logs/
          
          echo "::notice title=Content Generation::GitHub Pages content generated successfully"
      
      - name: Post-Generation Debug Report
        run: |
          echo "::group::Post-Generation Debug Info"
          python .github/workflows/scripts/pages-debug.py $VERBOSE_FLAG --output-dir docs --check-branches
          echo "::endgroup::"
          
          # Save log to debug logs directory
          cp github-pages-debug.log debug_logs/post-generation-debug.log
          
          echo "::notice title=Post-Generation Debug::Debug report generated after content creation"
      
      - name: Upload Debug Logs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-debug-logs
          path: debug_logs/
          retention-days: 7
      
      - name: Setup Git Configuration
        run: |
          # Configure Git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep gh-pages; then
            echo "::notice title=Branch Check::gh-pages branch already exists"
          else
            echo "::notice title=Branch Check::gh-pages branch does not exist, will be created"
          fi
      
      - name: Deploy to gh-pages Branch
        run: |
          # Create a temporary directory for the gh-pages content
          GH_PAGES_DIR=$(mktemp -d)
          
          # Copy the docs directory to the temporary directory
          cp -r docs/* $GH_PAGES_DIR/
          
          # Also create a temporary directory for log files
          LOG_BACKUP_DIR=$(mktemp -d)
          
          # Move log files to the backup directory to prevent conflicts
          if [ -f "content_generation.log" ]; then
            mv content_generation.log $LOG_BACKUP_DIR/
          fi
          if [ -f "github-pages-debug.log" ]; then
            mv github-pages-debug.log $LOG_BACKUP_DIR/
          fi
          if [ -d "debug_logs" ]; then
            cp -r debug_logs/* $LOG_BACKUP_DIR/ || true
            rm -rf debug_logs
          fi
          
          # Save the current commit SHA for reference
          CURRENT_COMMIT=$(git rev-parse HEAD)
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          echo "::notice title=Branch Info::Current branch is ${CURRENT_BRANCH}, commit ${CURRENT_COMMIT}"
          
          # Check if gh-pages branch exists locally
          if git show-ref --verify --quiet refs/heads/gh-pages; then
            # Branch exists locally, checkout
            # First, clean up any untracked files that might prevent checkout
            git clean -fd
            git checkout gh-pages
          else
            # Branch doesn't exist locally, create and checkout
            git checkout --orphan gh-pages
            git rm -rf . || true
          fi
          
          # Check if gh-pages branch exists remotely
          if git ls-remote --heads origin gh-pages | grep gh-pages; then
            echo "::notice title=Remote Branch::Remote gh-pages branch exists, synchronizing"
            
            # Fetch the latest changes from remote
            git fetch origin gh-pages
            
            # Check if we need to create the branch or sync with remote
            if git show-ref --verify --quiet refs/heads/gh-pages; then
              # If we have a local gh-pages branch, reset it to match origin/gh-pages
              git reset --hard origin/gh-pages
            else
              # Create a new branch tracking the remote
              # First, clean up any untracked files that might prevent checkout
              git clean -fd
              git checkout -b gh-pages origin/gh-pages
              git rm -rf . || true
            fi
          fi
          
          # Copy the content from the temporary directory
          cp -r $GH_PAGES_DIR/* .
          
          # Clean up any potential untracked files from previous runs
          find . -type f -not -path "./.git/*" -not -path "./_site/*" | grep -v -E '\.html$|\.css$|\.js$|\.md$|\.yml$|\.json$|\.svg$|\.png$|\.jpg$|\.jpeg$|\.gif$|\.ico$' | xargs rm -f || true
          
          # Add all files
          git add .
          
          # Commit changes with a meaningful message including the source commit
          git commit -m "Update GitHub Pages from commit ${CURRENT_COMMIT}" --allow-empty
          
          # Force push to gh-pages branch if needed (use with caution)
          echo "::notice title=Pushing Changes::Pushing content to gh-pages branch"
          git push -f origin gh-pages
          
          # Return to the previous branch - this is the part that's failing
          # Instead of using the shorthand '-', use the branch name we saved earlier
          if [ "${CURRENT_BRANCH}" != "HEAD" ]; then
            echo "::notice title=Branch Return::Returning to ${CURRENT_BRANCH} branch"
            git checkout ${CURRENT_BRANCH} || echo "::warning::Could not return to ${CURRENT_BRANCH}, but gh-pages was updated successfully"
          else
            echo "::notice title=Branch Return::Was in detached HEAD state, not returning to a branch"
          fi
          
          # Restore log files from backup
          mkdir -p debug_logs
          if [ -d "$LOG_BACKUP_DIR" ]; then
            cp -r $LOG_BACKUP_DIR/* . || true
            if [ -f "$LOG_BACKUP_DIR/content_generation.log" ]; then
              cp $LOG_BACKUP_DIR/content_generation.log .
            fi
            if [ -f "$LOG_BACKUP_DIR/github-pages-debug.log" ]; then
              cp $LOG_BACKUP_DIR/github-pages-debug.log .
            fi
            # Move non-file specific logs to debug_logs
            for f in $LOG_BACKUP_DIR/*; do
              if [ -f "$f" ] && [ "$(basename "$f")" != "content_generation.log" ] && [ "$(basename "$f")" != "github-pages-debug.log" ]; then
                cp "$f" debug_logs/
              fi
            done
          fi
          
          echo "::notice title=Content Deployment Success::Content successfully pushed to gh-pages branch"
          echo "::notice title=Next Steps::The deployment workflow on gh-pages branch will now handle the GitHub Pages deployment" 