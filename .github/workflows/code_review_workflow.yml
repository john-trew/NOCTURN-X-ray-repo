name: "Code Review and Analysis"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string
  workflow_run:
    workflows: ["Auto Code Generation with Claude on Issue"]
    types: [completed]


permissions: write-all

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set branch name
        id: set-branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BRANCH_NAME="claude-pr/issue-${{ github.event.inputs.issue_number }}"
          else
            BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME"

      # First checkout the issue branch
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.set-branch.outputs.branch_name }}
          fetch-depth: 0  # Get full history
          persist-credentials: true
          token: ${{ secrets.WORKFLOW_PAT }}

      # Debug branch state
      - name: Debug branch state
        run: |
          echo "Current branch before switch:"
          git branch
          
          # Switch to the issue branch
          git checkout ${{ steps.set-branch.outputs.branch_name }}
          
          echo "Current branch after switch:"
          git branch
          echo "Current directory contents:"
          ls -la .github/
          
          if [ -f ".github/generated/metadata.json" ]; then
            echo "==== Contents of metadata.json ===="
            cat .github/generated/metadata.json
          else
            echo "metadata.json not found in: $(pwd)/.github/generated/"
          fi

      # Then checkout main branch files
      - uses: actions/checkout@v4
        with:
          ref: main
          path: main-files

      # Download files from issue branch
      - name: Download issue branch files
        run: |
          # Debug current state
          echo "Current branch:"
          git branch
          echo "Current directory contents:"
          ls -la
          
          # Create generated directory if it doesn't exist
          mkdir -p .github/generated
          
          # Copy files from current branch to generated directory
          if [ -f ".github/generated/metadata.json" ]; then
            echo "==== Contents of metadata.json ===="
            cat .github/generated/metadata.json
            
            # Extract file paths and copy each file
            while IFS= read -r file; do
              echo "Processing $file"
              src_file="$file"
              dst_dir=".github/generated/$(dirname "$file")"
              
              mkdir -p "$dst_dir"
              if [ -f "$src_file" ]; then
                cp "$src_file" ".github/generated/$file"
                echo "Copied $src_file to .github/generated/$file"
              else
                echo "Warning: Source file not found: $src_file"
              fi
            done < <(jq -r '.generated_files[]' .github/generated/metadata.json)
            
            echo "==== Generated directory contents ===="
            ls -R .github/generated/
          else
            echo "Error: metadata.json not found in current branch"
            echo "Current directory structure:"
            find . -type f
            exit 1
          fi

      # Set up the directory structure
      - name: Setup directories
        run: |
          # Debug initial state
          echo "==== Initial directory structure ===="
          ls -la .github/ || echo ".github not found"
          
          # Create necessary directories
          mkdir -p .github/{main,scripts}
          
          # Copy relevant files from main to .github/main
          cp -r main-files/.github/scripts .github/main/ || true
          cp -r main-files/.github/workflows .github/main/ || true
          
          # Copy analyze_code.py from main to workspace
          cp main-files/.github/scripts/analyze_code.py .github/scripts/ || true
          
          rm -rf main-files
          
          # Debug directory structure
          echo "==== Full directory structure ===="
          find . -type f
          
          echo "==== Contents of .github/scripts ===="
          ls -la .github/scripts/ || echo "scripts dir not found"
          
          echo "==== Contents of .github/main ===="
          ls -la .github/main/ || echo "main dir not found"
          
          echo "==== Contents of .github/generated ===="
          ls -la .github/generated/ || echo "generated dir not found"
          
          # Check for metadata.json
          if [ -f ".github/generated/metadata.json" ]; then
            echo "==== Contents of metadata.json ===="
            cat .github/generated/metadata.json
          else
            echo "metadata.json not found in: $(pwd)/.github/generated/"
            echo "Listing .github contents:"
            ls -R .github/
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install anthropic tenacity PyGithub
          
      - name: Process branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Processing issue #${{ github.event.inputs.issue_number }}"
          else
            echo "Processing workflow run from Claude automation"
          fi

      - name: Analyze code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Get the list of files from metadata
          if [ -f ".github/generated/metadata.json" ]; then
            # Extract required files from metadata
            required_files=$(jq -r '.generated_files[]' .github/generated/metadata.json)
            echo "Files to analyze from metadata:"
            echo "$required_files"
          else
            echo "Error: metadata.json not found"
            echo "Contents of .github:"
            ls -R .github/
            exit 1
          fi
          
          # Create staging directory with complete file structure
          mkdir -p staging/.github/{workflows,scripts}
          
          # Copy files directly from the issue branch
          while IFS= read -r file; do
            src_file=".github/generated/$file"
            dst_dir="staging/.github/$(dirname ${file#.github/})"
            
            if [ -f "$src_file" ]; then
              mkdir -p "$dst_dir"
              cp "$src_file" "$dst_dir/"
              echo "Copied $src_file to staging"
            else
              echo "Warning: Generated file not found: $src_file"
            fi
          done <<< "$required_files"
          
          # Verify staging contents
          echo "Staging directory contents:"
          find staging -type f
          
          # Verify required files exist in staging
          while IFS= read -r file; do
            if [ ! -f "staging/$file" ]; then
              echo "Error: Required file not found in staging: $file"
              exit 1
            fi
          done <<< "$required_files"

      - name: Commit combined files
        env:
          WORKFLOW_PAT: ${{ secrets.WORKFLOW_PAT }}
        run: |
          # Debug git status
          echo "Current branch:"
          git branch
          echo "Remote URL:"
          git remote -v
          
          # Copy files from staging to their final locations
          cp -r staging/.github/* .github/
          
          # Configure git with PAT for workflow push
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${WORKFLOW_PAT}@github.com/${{ github.repository }}.git
          
          # Add and commit the changes
          git add .github/workflows/combined_ct_images_to_text.yml
          git add .github/scripts/url_screenshot_check.py
          
          # Commit and push
          git commit -m "Combined code updates for issue #${{ github.event.inputs.issue_number || github.event.workflow_run.pull_requests[0].number }}"
          git push origin HEAD:${{ steps.set-branch.outputs.branch_name }}

      - name: Add review comment
        if: github.event_name == 'workflow_run'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f ".github/generated/review_comment.md" ]; then
            gh pr comment ${{ github.event.workflow_run.pull_requests[0].number }} -F .github/generated/review_comment.md
          fi

      - name: Show review comment
        if: github.event_name == 'workflow_dispatch' 
        run: |
          if [ -f ".github/generated/review_comment.md" ]; then
            echo "Review comment contents:"
            cat ".github/generated/review_comment.md"
          else
            echo "No review comment generated"
          fi
