name: "Code Review and Analysis"

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string
  workflow_run:
    workflows: ["Auto Code Generation with Claude on Issue"]
    types: [completed]


permissions: write-all

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set branch name
        id: set-branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BRANCH_NAME="claude-pr/issue-${{ github.event.inputs.issue_number }}"
          else
            BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME"

      # First checkout issue branch to get repository structure
      - name: Checkout issue branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set-branch.outputs.branch_name }}
          fetch-depth: 0  # Get full history
          persist-credentials: true
          token: ${{ secrets.WORKFLOW_PAT }}
          repository: johntrue15/NOCTURN-X-ray-repo

      # Then checkout main branch files to a subdirectory
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          path: main-files
          repository: johntrue15/NOCTURN-X-ray-repo
          token: ${{ secrets.WORKFLOW_PAT }}
          fetch-depth: 1

      # Set up Python and dependencies
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pathlib anthropic

      # Set up the directory structure
      - name: Setup directories
        run: |
          # Debug current state
          echo "Current workspace:"
          pwd
          ls -la
          
          echo "Main files location:"
          ls -la main-files/ || echo "main-files not found"
          
          # Create necessary directories
          mkdir -p .github/generated
          
          # Verify main files checkout
          if [ ! -d "main-files/.github/scripts" ]; then
            echo "Error: main-files scripts directory not found"
            echo "Contents of main-files:"
            find main-files -type f
            exit 1
          fi
          
          # Copy analyze_code.py from main to workspace root
          if [ -f "main-files/.github/scripts/analyze_code.py" ]; then
            cp main-files/.github/scripts/analyze_code.py ./analyze_code.py
            echo "Copied analyze_code.py to workspace root"
          else
            echo "Error: analyze_code.py not found in main-files"
            echo "Contents of main-files/.github/scripts:"
            ls -la main-files/.github/scripts/
            exit 1
          fi
          
          # Debug final structure
          echo "Final workspace structure:"
          find . -maxdepth 3 -type f
          
          echo "Contents of .github/generated:"
          ls -la .github/generated/

      # Run the analysis using analyze_code from main
      - name: Analyze code
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Create log directory
          mkdir -p logs
          
          # Run analyze_code.py and capture output
          echo "Running code analysis..."
          python analyze_code.py 2>&1 | tee logs/analyze.log
          
          # Check if analysis was successful
          if [ -f "logs/analyze.log" ]; then
            echo "Analysis log:"
            cat logs/analyze.log
            
            # Check for Claude responses in log
            if grep -q "Got response from Claude" logs/analyze.log; then
              echo "Claude analysis complete"
            else
              echo "Warning: No Claude responses found in log"
            fi
          fi
          
          # Verify staging contents
          echo "Staging directory contents:"
          find staging -type f
          
          # Save log as artifact
          echo "logs_path=logs/analyze.log" >> $GITHUB_OUTPUT

      # Upload analysis logs
      - name: Upload analysis logs
        uses: actions/upload-artifact@v3
        with:
          name: analysis-logs
          path: logs/analyze.log

      # Commit the changes
      - name: Commit combined files
        env:
          WORKFLOW_PAT: ${{ secrets.WORKFLOW_PAT }}
        run: |
          # Debug git status
          echo "Current branch:"
          git branch
          echo "Remote URL:"
          git remote -v
          
          # Debug staging contents
          echo "Staging contents:"
          find staging -type f
          
          # Copy files from staging to their final locations
          if [ -d "staging/.github" ]; then
            cp -r staging/.github/* .github/
            echo "Copied files from staging to .github"
          else
            echo "Error: staging/.github directory not found"
            exit 1
          fi
          
          # Configure git with PAT for workflow push
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${WORKFLOW_PAT}@github.com/${{ github.repository }}.git
          
          # Get files from metadata and add with full paths
          files=$(jq -r '.generated_files[]' .github/generated/metadata.json)
          
          # Add and commit each file with full path
          while IFS= read -r file; do
            echo "Adding file: $file"
            git add ".github/$file"
          done <<< "$files"
          
          # Check analyze logs for success
          if [ -f "logs/analyze.log" ] && grep -q "Got response from Claude" logs/analyze.log; then
            commit_msg="Combined code updates from Claude analysis for issue #${{ github.event.inputs.issue_number || github.event.workflow_run.pull_requests[0].number }}"
          else
            commit_msg="Updated code files for issue #${{ github.event.inputs.issue_number || github.event.workflow_run.pull_requests[0].number }}"
          fi
          
          # Commit and push
          git commit -m "$commit_msg"
          git push origin HEAD:${{ steps.set-branch.outputs.branch_name }}

      - name: Add review comment
        if: github.event_name == 'workflow_run'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f ".github/generated/review_comment.md" ]; then
            gh pr comment ${{ github.event.workflow_run.pull_requests[0].number }} -F .github/generated/review_comment.md
          fi

      - name: Show review comment
        if: github.event_name == 'workflow_dispatch' 
        run: |
          if [ -f ".github/generated/review_comment.md" ]; then
            echo "Review comment contents:"
            cat ".github/generated/review_comment.md"
          else
            echo "No review comment generated"
          fi
